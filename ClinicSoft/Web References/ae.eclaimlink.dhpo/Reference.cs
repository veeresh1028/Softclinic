//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ClinicSoft.ae.eclaimlink.dhpo {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="eRxValidateTransactionSoap", Namespace="http://www.eClaimLink.ae/")]
    public partial class eRxValidateTransaction : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadERxRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadERxAuthorizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadTransactionFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNewTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchTransactionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTransactionDownloadedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeteRxTransactionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public eRxValidateTransaction() {
            this.Url = global::ClinicSoft.Properties.Settings.Default.ClinicSoft_ae_eclaimlink_dhpo_eRxValidateTransaction;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadERxRequestCompletedEventHandler UploadERxRequestCompleted;
        
        /// <remarks/>
        public event UploadERxAuthorizationCompletedEventHandler UploadERxAuthorizationCompleted;
        
        /// <remarks/>
        public event DownloadTransactionFileCompletedEventHandler DownloadTransactionFileCompleted;
        
        /// <remarks/>
        public event GetNewTransactionsCompletedEventHandler GetNewTransactionsCompleted;
        
        /// <remarks/>
        public event SearchTransactionsCompletedEventHandler SearchTransactionsCompleted;
        
        /// <remarks/>
        public event SetTransactionDownloadedCompletedEventHandler SetTransactionDownloadedCompleted;
        
        /// <remarks/>
        public event GeteRxTransactionCompletedEventHandler GeteRxTransactionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.eClaimLink.ae/UploadERxRequest", RequestNamespace="http://www.eClaimLink.ae/", ResponseNamespace="http://www.eClaimLink.ae/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UploadERxRequest(string facilityLogin, string facilityPwd, string clinicianLogin, string clinicianPwd, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent, string fileName, out int eRxReferenceNo, out string errorMessage, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] errorReport) {
            object[] results = this.Invoke("UploadERxRequest", new object[] {
                        facilityLogin,
                        facilityPwd,
                        clinicianLogin,
                        clinicianPwd,
                        fileContent,
                        fileName});
            eRxReferenceNo = ((int)(results[1]));
            errorMessage = ((string)(results[2]));
            errorReport = ((byte[])(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UploadERxRequestAsync(string facilityLogin, string facilityPwd, string clinicianLogin, string clinicianPwd, byte[] fileContent, string fileName) {
            this.UploadERxRequestAsync(facilityLogin, facilityPwd, clinicianLogin, clinicianPwd, fileContent, fileName, null);
        }
        
        /// <remarks/>
        public void UploadERxRequestAsync(string facilityLogin, string facilityPwd, string clinicianLogin, string clinicianPwd, byte[] fileContent, string fileName, object userState) {
            if ((this.UploadERxRequestOperationCompleted == null)) {
                this.UploadERxRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadERxRequestOperationCompleted);
            }
            this.InvokeAsync("UploadERxRequest", new object[] {
                        facilityLogin,
                        facilityPwd,
                        clinicianLogin,
                        clinicianPwd,
                        fileContent,
                        fileName}, this.UploadERxRequestOperationCompleted, userState);
        }
        
        private void OnUploadERxRequestOperationCompleted(object arg) {
            if ((this.UploadERxRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadERxRequestCompleted(this, new UploadERxRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.eClaimLink.ae/UploadERxAuthorization", RequestNamespace="http://www.eClaimLink.ae/", ResponseNamespace="http://www.eClaimLink.ae/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UploadERxAuthorization(string PayerLogin, string PayerPwd, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent, string fileName, out string errorMessage, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] errorReport) {
            object[] results = this.Invoke("UploadERxAuthorization", new object[] {
                        PayerLogin,
                        PayerPwd,
                        fileContent,
                        fileName});
            errorMessage = ((string)(results[1]));
            errorReport = ((byte[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UploadERxAuthorizationAsync(string PayerLogin, string PayerPwd, byte[] fileContent, string fileName) {
            this.UploadERxAuthorizationAsync(PayerLogin, PayerPwd, fileContent, fileName, null);
        }
        
        /// <remarks/>
        public void UploadERxAuthorizationAsync(string PayerLogin, string PayerPwd, byte[] fileContent, string fileName, object userState) {
            if ((this.UploadERxAuthorizationOperationCompleted == null)) {
                this.UploadERxAuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadERxAuthorizationOperationCompleted);
            }
            this.InvokeAsync("UploadERxAuthorization", new object[] {
                        PayerLogin,
                        PayerPwd,
                        fileContent,
                        fileName}, this.UploadERxAuthorizationOperationCompleted, userState);
        }
        
        private void OnUploadERxAuthorizationOperationCompleted(object arg) {
            if ((this.UploadERxAuthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadERxAuthorizationCompleted(this, new UploadERxAuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.eClaimLink.ae/DownloadTransactionFile", RequestNamespace="http://www.eClaimLink.ae/", ResponseNamespace="http://www.eClaimLink.ae/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DownloadTransactionFile(string login, string pwd, string fileId, out string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] out byte[] file, out string errorMessage) {
            object[] results = this.Invoke("DownloadTransactionFile", new object[] {
                        login,
                        pwd,
                        fileId});
            fileName = ((string)(results[1]));
            file = ((byte[])(results[2]));
            errorMessage = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DownloadTransactionFileAsync(string login, string pwd, string fileId) {
            this.DownloadTransactionFileAsync(login, pwd, fileId, null);
        }
        
        /// <remarks/>
        public void DownloadTransactionFileAsync(string login, string pwd, string fileId, object userState) {
            if ((this.DownloadTransactionFileOperationCompleted == null)) {
                this.DownloadTransactionFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadTransactionFileOperationCompleted);
            }
            this.InvokeAsync("DownloadTransactionFile", new object[] {
                        login,
                        pwd,
                        fileId}, this.DownloadTransactionFileOperationCompleted, userState);
        }
        
        private void OnDownloadTransactionFileOperationCompleted(object arg) {
            if ((this.DownloadTransactionFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadTransactionFileCompleted(this, new DownloadTransactionFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.eClaimLink.ae/GetNewTransactions", RequestNamespace="http://www.eClaimLink.ae/", ResponseNamespace="http://www.eClaimLink.ae/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNewTransactions(string login, string pwd, out string xmlTransactions, out string errorMessage) {
            object[] results = this.Invoke("GetNewTransactions", new object[] {
                        login,
                        pwd});
            xmlTransactions = ((string)(results[1]));
            errorMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNewTransactionsAsync(string login, string pwd) {
            this.GetNewTransactionsAsync(login, pwd, null);
        }
        
        /// <remarks/>
        public void GetNewTransactionsAsync(string login, string pwd, object userState) {
            if ((this.GetNewTransactionsOperationCompleted == null)) {
                this.GetNewTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNewTransactionsOperationCompleted);
            }
            this.InvokeAsync("GetNewTransactions", new object[] {
                        login,
                        pwd}, this.GetNewTransactionsOperationCompleted, userState);
        }
        
        private void OnGetNewTransactionsOperationCompleted(object arg) {
            if ((this.GetNewTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNewTransactionsCompleted(this, new GetNewTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.eClaimLink.ae/SearchTransactions", RequestNamespace="http://www.eClaimLink.ae/", ResponseNamespace="http://www.eClaimLink.ae/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SearchTransactions(string login, string pwd, int direction, string callerLicense, string clinicianLicense, string memberID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> eRxReferenceNo, int transactionStatus, string transactionFromDate, string transactionToDate, int minRecordCount, int maxRecordCount, out string foundTransactions, out string errorMessage) {
            object[] results = this.Invoke("SearchTransactions", new object[] {
                        login,
                        pwd,
                        direction,
                        callerLicense,
                        clinicianLicense,
                        memberID,
                        eRxReferenceNo,
                        transactionStatus,
                        transactionFromDate,
                        transactionToDate,
                        minRecordCount,
                        maxRecordCount});
            foundTransactions = ((string)(results[1]));
            errorMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SearchTransactionsAsync(string login, string pwd, int direction, string callerLicense, string clinicianLicense, string memberID, System.Nullable<int> eRxReferenceNo, int transactionStatus, string transactionFromDate, string transactionToDate, int minRecordCount, int maxRecordCount) {
            this.SearchTransactionsAsync(login, pwd, direction, callerLicense, clinicianLicense, memberID, eRxReferenceNo, transactionStatus, transactionFromDate, transactionToDate, minRecordCount, maxRecordCount, null);
        }
        
        /// <remarks/>
        public void SearchTransactionsAsync(string login, string pwd, int direction, string callerLicense, string clinicianLicense, string memberID, System.Nullable<int> eRxReferenceNo, int transactionStatus, string transactionFromDate, string transactionToDate, int minRecordCount, int maxRecordCount, object userState) {
            if ((this.SearchTransactionsOperationCompleted == null)) {
                this.SearchTransactionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchTransactionsOperationCompleted);
            }
            this.InvokeAsync("SearchTransactions", new object[] {
                        login,
                        pwd,
                        direction,
                        callerLicense,
                        clinicianLicense,
                        memberID,
                        eRxReferenceNo,
                        transactionStatus,
                        transactionFromDate,
                        transactionToDate,
                        minRecordCount,
                        maxRecordCount}, this.SearchTransactionsOperationCompleted, userState);
        }
        
        private void OnSearchTransactionsOperationCompleted(object arg) {
            if ((this.SearchTransactionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchTransactionsCompleted(this, new SearchTransactionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.eClaimLink.ae/SetTransactionDownloaded", RequestNamespace="http://www.eClaimLink.ae/", ResponseNamespace="http://www.eClaimLink.ae/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SetTransactionDownloaded(string login, string pwd, string fileID, out string errorMessage) {
            object[] results = this.Invoke("SetTransactionDownloaded", new object[] {
                        login,
                        pwd,
                        fileID});
            errorMessage = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SetTransactionDownloadedAsync(string login, string pwd, string fileID) {
            this.SetTransactionDownloadedAsync(login, pwd, fileID, null);
        }
        
        /// <remarks/>
        public void SetTransactionDownloadedAsync(string login, string pwd, string fileID, object userState) {
            if ((this.SetTransactionDownloadedOperationCompleted == null)) {
                this.SetTransactionDownloadedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTransactionDownloadedOperationCompleted);
            }
            this.InvokeAsync("SetTransactionDownloaded", new object[] {
                        login,
                        pwd,
                        fileID}, this.SetTransactionDownloadedOperationCompleted, userState);
        }
        
        private void OnSetTransactionDownloadedOperationCompleted(object arg) {
            if ((this.SetTransactionDownloadedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTransactionDownloadedCompleted(this, new SetTransactionDownloadedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.eClaimLink.ae/GeteRxTransaction", RequestNamespace="http://www.eClaimLink.ae/", ResponseNamespace="http://www.eClaimLink.ae/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GeteRxTransaction(string login, string pwd, string memberID, int eRxReferenceNo, out string xmlTransactions, out string errorMessage) {
            object[] results = this.Invoke("GeteRxTransaction", new object[] {
                        login,
                        pwd,
                        memberID,
                        eRxReferenceNo});
            xmlTransactions = ((string)(results[1]));
            errorMessage = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GeteRxTransactionAsync(string login, string pwd, string memberID, int eRxReferenceNo) {
            this.GeteRxTransactionAsync(login, pwd, memberID, eRxReferenceNo, null);
        }
        
        /// <remarks/>
        public void GeteRxTransactionAsync(string login, string pwd, string memberID, int eRxReferenceNo, object userState) {
            if ((this.GeteRxTransactionOperationCompleted == null)) {
                this.GeteRxTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeteRxTransactionOperationCompleted);
            }
            this.InvokeAsync("GeteRxTransaction", new object[] {
                        login,
                        pwd,
                        memberID,
                        eRxReferenceNo}, this.GeteRxTransactionOperationCompleted, userState);
        }
        
        private void OnGeteRxTransactionOperationCompleted(object arg) {
            if ((this.GeteRxTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeteRxTransactionCompleted(this, new GeteRxTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UploadERxRequestCompletedEventHandler(object sender, UploadERxRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadERxRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadERxRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int eRxReferenceNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public byte[] errorReport {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void UploadERxAuthorizationCompletedEventHandler(object sender, UploadERxAuthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadERxAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadERxAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte[] errorReport {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DownloadTransactionFileCompletedEventHandler(object sender, DownloadTransactionFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadTransactionFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadTransactionFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string fileName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte[] file {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GetNewTransactionsCompletedEventHandler(object sender, GetNewTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNewTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNewTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlTransactions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SearchTransactionsCompletedEventHandler(object sender, SearchTransactionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchTransactionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchTransactionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string foundTransactions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SetTransactionDownloadedCompletedEventHandler(object sender, SetTransactionDownloadedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTransactionDownloadedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTransactionDownloadedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void GeteRxTransactionCompletedEventHandler(object sender, GeteRxTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeteRxTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeteRxTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlTransactions {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string errorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591
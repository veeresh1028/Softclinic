@model BusinessEntities.Masters.EmployeeRoasters

<form id="form_Edit_Roster" autocomplete="off" class="" ondrop="return false;" onpaste="return false;" oncut="return false;">
    @Html.HiddenFor(m => m.erId)
    @Html.HiddenFor(m => m.er_employee, new { @id = "uer_employee" })
    @Html.AntiForgeryToken()
    <div class="row mb-2">
        <div class="col-sm-6 col-md-4 col-lg-4">
            <div class="form-group mb-3">
                <label class="form-label">Working Branch&nbsp;<span class="text-danger">*</span></label>
                @Html.DropDownListFor(m => m.er_branch, new SelectList(Model.BranchList, "id", "text"), "Please Select", new { @class = "form-select select2", @id = "uer_branch" })
            </div>
        </div>
        <div class="col-sm-6 col-md-4 col-lg-4">
            <div class="form-group mb-2">
                <label class="form-label">From Date&nbsp;<span class="text-danger">*</span></label>
            </div>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        <i class="fe fe-calendar"></i>
                    </div>
                </div>
                @Html.TextBoxFor(model => model.er_fdate, new { @class = "form-control", @placeholder = "Select From Date", @id = "uer_fdate" })
            </div>
        </div>
        <div class="col-sm-6 col-md-4 col-lg-4">
            <div class="form-group mb-2">
                <label class="form-label">Till Date</label>
            </div>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        <i class="fe fe-calendar"></i>
                    </div>
                </div>
                @Html.TextBoxFor(model => model.er_tdate, new { @class = "form-control", @placeholder = "Select Till Date", @id = "uer_tdate" })
            </div>
        </div>
        <div class="col-sm-6 col-md-4 col-lg-4">
            <div class="form-group mb-3">
                <label class="form-label">Working Day(s)&nbsp;<span class="text-danger">*</span></label>
                @Html.DropDownListFor(m => m.er_day, new List<SelectListItem>
                {
                    new SelectListItem{ Value="Monday", Text="Monday"},
                    new SelectListItem{ Value="Tuesday", Text="Tuesday"},
                    new SelectListItem{ Value="Wednesday", Text="Wednesday"},
                    new SelectListItem{ Value="Thursday", Text="Thursday"},
                    new SelectListItem{ Value="Friday", Text="Friday"},
                    new SelectListItem{ Value="Saturday", Text="Saturday"},
                    new SelectListItem{ Value="Sunday", Text="Sunday"}
                }, new { @class = "form-select select2 mb-4", @id = "uer_day" })
            </div>
        </div>
        <div class="col-sm-6 col-md-4 col-lg-4">
            <div class="form-group mb-3">
                <label class="form-label">Type(s)&nbsp;<span class="text-danger">*</span></label>
                @Html.DropDownListFor(m => m.er_type, new List<SelectListItem>
                {
                    new SelectListItem{ Value="Normal", Text="Normal"},
                    new SelectListItem{ Value="Meetings", Text="Meetings"},
                    new SelectListItem{ Value="Reserved", Text="Reserved"},
                    new SelectListItem{ Value="Plastic Surgery", Text="Plastic Surgery"},
                    new SelectListItem{ Value="Implants", Text="Implants"},
                    new SelectListItem{ Value="Implants", Text="New Patient G.D"},
                    new SelectListItem{ Value="Co. Managed", Text="Co. Managed"},
                    new SelectListItem{ Value="Pedo New Pat.", Text="Pedo New Pat."}
                }, new { @class = "form-select select2 mb-4", @id = "uer_type" })
            </div>
        </div>
        <div class="col-sm-6 col-md-2 col-lg-2">
            <div class="form-group mb-3">
                <label class="form-label">From Time&nbsp;<span class="text-danger">*</span></label>
                <select class="form-control select2" id="uer_ftime">
                </select>
            </div>
        </div>
        <div class="col-sm-6 col-md-2 col-lg-2">
            <div class="form-group mb-3">
                <label class="form-label">To Time&nbsp;<span class="text-danger">*</span></label>
                <select class="form-control select2" id="uer_ttime">
                </select>
            </div>
        </div>
    </div>
    <div class="row mb-2 mt-2">
        <div class="col-sm-12 col-md-12 col-lg-12 text-center">
            <div class="btn-list btn-animation">
                <button type="submit" class="btn btn-warning" id="btn_Update_Roster">Save Changes</button>
                <button class="btn btn-outline-danger" id="btn_Update_Close">Close</button>
            </div>
        </div>
    </div>
</form>
<script>

    //#region Page Load
    $(function () {
        $("#uer_branch").select2({
            placeholder: 'Select Branch',
            width: '100%',
            minimumResultsForSearch: '',
            maximumInputLength: 10,
            dropdownParent: $('#form_Edit_Roster'),
            escapeMarkup: function (markup) {
                return markup;
            }
        });

        $('#uer_branch').trigger({
            type: 'select2:select'
        });

        $("#uer_type").select2({
            placeholder: 'Select Type',
            width: '100%',
            minimumResultsForSearch: -1,
            dropdownParent: $('#form_Edit_Roster'),
            escapeMarkup: function (markup) {
                return markup;
            }
        });

        $("#uer_ftime").select2({
            placeholder: 'Select From Time',
            width: '100%',
            minimumResultsForSearch: '',
            maximumInputLength: 5,
            dropdownParent: $('#form_Edit_Roster'),
            escapeMarkup: function (markup) {
                return markup;
            }
        });

        $("#uer_ttime").select2({
            placeholder: 'Select Till Time',
            width: '100%',
            minimumResultsForSearch: '',
            maximumInputLength: 5,
            dropdownParent: $('#form_Edit_Roster'),
            escapeMarkup: function (markup) {
                return markup;
            }
        });

        $('#uer_fdate').bootstrapdatepicker({
            format: "dd-MM-yyyy",
            viewMode: "date",
            todayHighlight: true,
            autoclose: true,
            multidate: false,
            multidateSeparator: "-",
            startDate: new Date()
        });
        $("#uer_fdate").bootstrapdatepicker("setDate", moment(new Date("@Model.er_fdate")).format("DD-MM-YYYY"));

        $('#uer_tdate').bootstrapdatepicker({
            format: "dd-MM-yyyy",
            viewMode: "date",
            todayHighlight: true,
            autoclose: true,
            multidate: false,
            multidateSeparator: "-",
            startDate: new Date()
        });

        if ("@Model.er_tdate" == "1/1/2099 12:00:00 AM") {
            $("#uer_tdate").bootstrapdatepicker("setDate", "");
        }
        else {
            $("#uer_tdate").bootstrapdatepicker("setDate", moment(new Date("@Model.er_tdate")).format("DD-MM-YYYY"));
        }

        setDay('@Model.er_day');

        validationEdit();
    });
    //#endregion

    //#region Validation Initialization
    var validationEdit = function () {
        $("#form_Edit_Roster").validate({
            focusInvalid: true,
            rules:
            {
                uer_branch: {
                    required: true
                },
                uer_fdate: {
                    required: true
                },
                uer_ftime: {
                    required: true
                },
                uer_ttime: {
                    required: true
                },
                uer_day: {
                    required: true
                },
                uer_type: {
                    required: true
                }
            },
            messages: {
                uer_branch: {
                    required: "Select Branch"
                },
                uer_fdate: {
                    required: "Select From Date"
                },
                uer_ftime: {
                    required: "Select From time"
                },
                uer_ttime: {
                    required: "Select To time"
                },
                uer_day: {
                    required: "Select Working Day(s)"
                },
                uer_type: {
                    required: "Select the Followup Type"
                }
            },
            highlight: function (element) {
                var elem = $(element);

                if (elem.hasClass("select2-hidden-accessible")) {
                    $("#select2-" + elem.attr("id") + "-container").parent().addClass('error');
                } else {
                    elem.parent().addClass('has-error');
                }
                $(element).parent().addClass('has-error');
            },
            unhighlight: function (element) {
                var elem = $(element);
                if (elem.hasClass("select2-hidden-accessible")) {
                    $("#select2-" + elem.attr("id") + "-container").parent().removeClass('error');
                } else {
                    elem.removeClass('has-error');
                }
                $(element).parent().removeClass('has-error');
            },
            errorElement: 'span',
            errorClass: 'text-danger fw-bold',
            errorPlacement: function (error, element) {
                var elem = $(element);
                if (elem.hasClass("select2-hidden-accessible")) {
                    element = $("#select2-" + elem.attr("id") + "-container").parent();
                    error.insertAfter(element);
                } else {
                    error.insertAfter(element);
                }
                if (element.parent('.input-group').length) {
                    error.insertAfter(element.parent());
                } else {
                    error.insertAfter(element);
                }
            }
        });

        $('#uer_branch').on('change', function () {
            $(this).trigger('blur');
        });
        $('#uer_fdate').on('change', function () {
            $(this).trigger('blur');
        });
        $('#uer_ftime').on('change', function () {
            $(this).trigger('blur');
        });
        $('#uer_ttime').on('change', function () {
            $(this).trigger('blur');
        });
        $('#uer_day').on('change', function () {
            $(this).trigger('blur');
        });
        $('#uer_type').on('change', function () {
            $(this).trigger('blur');
        });

        $('#uer_fdate').keypress(function (e) {
            var charCode = (e.which) ? e.which : e.keyCode
            if (String.fromCharCode(charCode).match(/[^0-9./-]/g)) {
                return false;

            }
            else {
                if (e.target.value.length >= 15)
                    return false;
            }
        });
        $('#er_tdate').keypress(function (e) {
            var charCode = (e.which) ? e.which : e.keyCode
            if (String.fromCharCode(charCode).match(/[^0-9./-]/g)) {
                return false;

            }
            else {
                if (e.target.value.length >= 15)
                    return false;
            }
        });
    };
    //#endregion

    //#region On Branch Select
    $('#uer_branch').on('select2:select', function () {
        if ($(this).val() != "" && $('#uer_branch').val() != "") {
            $.ajax({
                type: 'GET',
                url: '@Url.Action("GetTimeBasedOnBranch", "Employees", new { area = "Masters" })?setId=' + $(this).val(),
                dataType: 'json',
                success: function (response) {
                    if (response.length > 0) {
                        $('#uer_ftime').empty();
                        $('#uer_ttime').empty();

                        $.each(response, function (j) {
                            var newOption = new Option(response[j].text, response[j].id, (response[j].text === "@Model.er_ftime") ? true : false, (response[j].text === "@Model.ftime") ? true : false);
                            $('#uer_ftime').append(newOption).trigger('change');
                        });

                        $.each(response, function (j) {
                            var newOption = new Option(response[j].text, response[j].id, (response[j].text === "@Model.er_ttime") ? true : false, (response[j].text === "@Model.ttime") ? true : false);
                            $('#uer_ttime').append(newOption).trigger('change');
                        });
                    }
                },
                error: function (xhr) {
                    console.log("Failed to Load Time Slots! Error Message : " + xhr.statusText);
                }
            });
        }
    });
    //#endregion

    //#region Button Close Edit Roster
    $('#btn_Update_Close').on('click', function (e) {
        e.preventDefault();
        $('#editRoaster').hide();
    });
    //#endregion

    //#region Update Employee Roster
    $('#btn_Update_Roster').on('click', function (e) {
        e.preventDefault();

        if ($("#form_Edit_Roster").valid()) {

            $('#btn_Update_Roster').removeClass("btn btn-warning");
            $('#btn_Update_Roster').addClass("btn btn-warning btn-loaders btn-icon");
            $('#btn_Update_Roster').parent().addClass("curdrop");
            $('.btnCloseCreate').addClass("disabled");
            $('#btn_Update_Roster').html("Saving Changes.. Please Wait");

            let isValid = true;
            let app_f = moment($("#uer_fdate").val());
            let app_t = moment($("#uer_tdate").val());
            // Check if Date From is a valid Date
            if ($("#uer_fdate").val() != null && $("#uer_fdate").val() != 0 && $("#uer_fdate").val() != "" && $("#uer_fdate").val() != undefined) {
                if (!app_f.isValid()) {
                    isValid = false;
                    stopEditLoading();
                    e.stopPropagation();
                    return $.growl.error({
                        title: "Error",
                        message: "Invalid From Date!"
                    });
                }
            }
            // Check if Date To is a valid Date
            if ($("#uer_tdate").val() != null && $("#uer_tdate").val() != 0 && $("#uer_tdate").val() != "" && $("#uer_tdate").val() != undefined) {
                if (!app_t.isValid()) {
                    isValid = false;
                    stopEditLoading();
                    e.stopPropagation();
                    return $.growl.error({
                        title: "Error",
                        message: "Invalid To Date!"
                    });
                }
            }
            // Check if Time Range is valid
            var startTime = $("#uer_ftime :selected").text();
            var endTime = $("#uer_ttime :selected").text();
            if (startTime == "00:00" && endTime == "00:00") {
                startTime = "23:59";
            }
            if (endTime == "12:00") {
                endTime = "23:59";
            }
            endTime = moment(endTime, "HH:mm");
            startTime = moment(startTime, "HH:mm");
            if (endTime.diff(startTime, 'minutes') <= 0) {
                isValid = false;
                var index = [];
                index.push("uer_ftime");
                index.push("uer_ttime");

                $.each(index, function (i, v) {
                    if (index[i] != null && index[i] != "") {
                        var elem = $("#" + index[i]);
                        if (elem.hasClass("select2-hidden-accessible")) {
                            $("#select2-" + elem.attr("id") + "-container").parent().addClass(' error');
                        }
                        else {
                            $(elem).removeClass("is-invalid");
                        }

                        setTimeout(function () {
                            if (elem.hasClass("select2-hidden-accessible")) {
                                $("#select2-" + elem.attr("id") + "-container").parent().removeClass(' error');
                            }
                            else {
                                $(elem).removeClass("is-invalid");
                            }
                        }, 5000);
                    }
                });

                stopEditLoading();
                e.stopPropagation();

                return $.growl.error({
                    title: "Error!",
                    message: "Roster To Time should be greater than From Time!"
                });
            }
            // Check if Date Range is valid
            //if (($("#uer_fdate").val() != null && $("#uer_fdate").val() != 0 && $("#uer_fdate").val() != "" && $("#uer_fdate").val() != undefined) && ($("#uer_tdate").val() != null && $("#uer_tdate").val() != 0 && $("#uer_tdate").val() != "" && $("#uer_tdate").val() != undefined)) {
            //    if (app_f.isValid() && app_t.isValid()) {

            //        if (app_t.diff(app_f, 'days') <= 0) {
            //            isValid = false;

            //            var index = [];
            //            index.push("uer_fdate");
            //            index.push("uer_tdate");

            //            $.each(index, function (i, v) {
            //                if (index[i] != null && index[i] != "") {
            //                    var elem = $("#" + index[i]);
            //                    $(elem).addClass(" is-invalid");

            //                    setTimeout(function () {
            //                        $(elem).removeClass("is-invalid");
            //                    }, 5000);
            //                }
            //            });

            //            stopEditLoading();
            //            e.stopPropagation();

            //            return $.growl.error({
            //                title: "Error!",
            //                message: "Apointment Start Date should be less than or equal to End Date!"
            //            });
            //        }
            //    }
            //}
            var er_tdate = $("#uer_tdate").val();
            var er_range = "Limited";
            if (er_tdate == "") {
                er_tdate = "2099-01-01";
                er_range = "Unlimited";
            }

            if (isValid) {

                var _roster = {
                    "erId"          : $("#erId").val(),
                    "er_employee"   : $("#uer_employee").val(),
                    "er_branch"     : $("#uer_branch :selected").val(),
                    "er_fdate"      : moment($("#uer_fdate").val()).format("YYYY-MM-DD"),
                    "er_tdate"      : er_tdate,
                    "er_ftime"      : $("#uer_ftime :selected").val(),
                    "er_ttime"      : $("#uer_ttime :selected").val(),
                    "er_type"       : $("#uer_type").val(),
                    "er_day"        : $("#uer_day").val().toString(),
                    "er_range"      : er_range
                }

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("UpdateRoster", "Employees", new { area = "Masters" })",
                    dataType: 'json',
                    data: _roster,
                    success: function (response) {
                        stopEditLoading();

                        GetRosters();

                        if (response == "Success") {
                            _toast_html = toast_html('success', 'Employee Roster', '<i class="fe fe-check-circle me-2 text-success"></i> You have successfully updated the Roster!');
                        }
                        else if (response == "Exists") {
                            _toast_html = toast_html('warning', 'Employee Roster', '<i class="fe fe-alert-triangle me-2 text-warning"></i> The roster already exists!');
                        }
                        else {
                            _toast_html = toast_html('error', 'Employee Roster', '<i class="fe fe-slash me-2 text-danger"></i> Failed to Update Employee Roster!');
                        }

                        clearControls();
                        $('#editRoaster').hide();
                        var rosterToast = document.getElementById('rosterToast');
                        rosterToast.innerHTML = _toast_html;
                        var toast = new bootstrap.Toast(rosterToast);
                        toast.show();
                    },
                    error: function (xhr) {
                        $('#employee_rosters').modal('toggle');
                        console.log("Failed to Update Employee Roster!" + xhr);
                    }
                });
            }
            else {
                stopEditLoading();
            }
        }
        else {
            $('.modal-body').animate({
                scrollTop: ($('.has-error').offset().top - 300)
            }, 2000);
        }
    });
    // Stop Loading Animation
    var stopEditLoading = function () {
        $('#btn_Update_Roster').parent().removeClass("curdrop");
        $('#btn_Update_Roster').removeClass("btn btn-warning btn-loaders btn-icon");
        $('#btn_Update_Roster').addClass("btn btn-warning");
        $('#btn_Update_Roster').html("Save Changes");
        $('.btnCloseCreate').removeClass("disabled");
    }
    //#endregion

    //#region Set Day
    var setDay = function (er_day) {
        $("#uer_day").select2({
            placeholder: 'Select Working day',
            width: '100%',
            dropdownParent: $('#form_Edit_Roster'),
            minimumResultsForSearch: -1,
            escapeMarkup: function (markup) {
                return markup;
            }
        });

        var _data = {
            "id": er_day,
            "text": er_day,
        };

        $('#uer_day').trigger({
            type: 'select2:select',
            params: {
                data: _data
            }
        });
    }
    //#endregion

</script>
@model IEnumerable<BusinessEntities.Masters.TreatmentNotes>
@{
    ViewBag.Title = "Treatment Notes";
    ViewBag.tdn_active = "background: none !important; color: #664dc9 !important;";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="page-header">
    <div class="page-leftheader">
        <h4 class="page-title mb-0 text-primary">Treatment Notes</h4>
    </div>
    <div class="page-rightheader">
        <div class="btn-list">
            <a data-bs-toggle="modal" data-bs-target="#treatment_notes_modal" class="btn btn-secondary" onclick="addTreatmentNote()"><i class="mdi mdi-plus"></i>&nbsp;Add Treatment Note</a>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12 col-sm-12 col-md-12 d-flex justify-content-center">
        <div id="TreatmentNoteAlert"></div>
    </div>
    <div class="col-sm-12 col-md-12 col-lg-12">
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table id="tbl_treatment_notes" class="table table-striped table-bordered text-nowrap resize-table" style="width: 100%; cursor: pointer;">
                        <thead>
                            <tr style="color: #fff !important; background-color: #3C457D; border-color: #3C457D;">
                                <th class="border-bottom-0 font-weight-semibold text-white">#</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">CPT Code</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Notes</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Status</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Edit</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Delete</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Treatment Notes Modal -->
<div class="modal fade" id="treatment_notes_modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" id="size">
        <div class="modal-content" id="treatment_notes_body">
        </div>
    </div>
</div>
<!-- End Treatment Notes Modal -->
@section myScripts{
    <script type="text/javascript">
    //#region Page Load
    $(document).ready(function () {
        GetTreatmentNotes();
    });
    //#endregion

    //#region Get Treatment Notes
    var GetTreatmentNotes = function () {
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAllTreatmentNotes", "TreatmentNotes", new { area = "Masters" })",
            success: function (response) {
                if (response.isAuthorized != false) {
                    var table;
                    if ($.fn.dataTable.isDataTable('#tbl_treatment_notes')) {
                        table = $('#tbl_treatment_notes').DataTable();
                        table.clear();
                        table.rows.add(response).draw();
                    }
                    else {
                        BindDataTable(response);
                    }
                }
                else {
                    console.log("Access Denied!");
                }
            },
            error: function (xhr) {
                console.log("Failed to Load Treatments Notes : "+xhr.statusText);
            }
        });
    }
    //#endregion

    //#region Bind DataTable
    var BindDataTable = function (response) {
        var table = $("#tbl_treatment_notes").DataTable({
            fixedHeader: {
                header: true,
                footer: true
            },
            processing: true,
            "deferRender": true,
            "pageLength": 100,
            "retrieve": true,
            lengthChange: true,
            scrollX: true,
            scrollY: 500,
            scrollCollapse: true,
            "aaData": response,
            "aoColumns": [
                {
                    "mData": "tdnId",
                    "orderable": false,
                    "searchable": false,
                    "className": "text-center",
                    "render": function (data, type, row, meta) {
                        let _index = (meta.row) + 1;
                        if (_index >= 10) {
                            return "<a href='javascript:void(0)' class='fs-13 font-weight-bold'>" + _index + "</a>";
                        }
                        else {
                            return "<a href='javascript:void(0)' class='fs-13 font-weight-bold'>0" + _index + "</a>";
                        }
                    }
                },
                { "mData": "tdn_code" },
                { "mData": "tdn_notes" },
                {
                    "className": 'text-center',
                    "mData": "tdnId",
                    "render": function (tdnId, type, full, meta) {
                        var visible = "True";
                        var tdn_status = full.tdn_status;

                        if (visible === "True") {

                            if (tdn_status === "Active") {
                                return '<button type="button" class="badge rounded-pill bg-success mt-2 border-success" style="width: 60px;" onclick="updateStatus(\'' + tdnId + '\',\'' + tdn_status + '\')">' + tdn_status + '</button>'
                            }
                            else if (tdn_status === "Inactive") {
                                return '<button type="button" class="badge rounded-pill bg-warning mt-2 border-warning" style="width: 60px;" onclick="updateStatus(\'' + tdnId + '\',\'' + tdn_status + '\')">' + tdn_status + '</button>'
                            }
                            else if (tdn_status === "Deleted") {

                                return '<button type="button" class="badge rounded-pill bg-danger mt-2 border-danger" style="width: 60px;" onclick="updateStatus(\'' + tdnId + '\',\'' + tdn_status + '\')">' + tdn_status + '</button>'
                            }
                            else {
                                return ''
                            }
                        }
                        else {
                            return '<span class="badge rounded-pill text-danger mt-2 border-danger">Allocated</span>'
                        }
                    }
                },
                {
                    "mData": "tdnId",
                    "className": 'text-center',
                    "orderable": false,
                    "searchable": false,
                    "render": function (tdnId, type, full, meta) {
                        var status = full.tdn_status;
                        var visible = "True";

                        if (status === "Active" && visible === "True") {
                            return '<button type="button" data-bs-toggle="modal" data-bs-target="#treatment_notes_modal" onclick="editTreatmentNote(' + full.tdnId + ')" class="btn btn-sm btn-outline-primary">Edit</button>';
                        }
                        else {
                            return ''
                        }
                    }
                },
                {
                    "mData": "tdnId",
                    "className": 'text-center',
                    "orderable": false,
                    "searchable": false,
                    "render": function (tdnId, type, full, meta) {
                        var status = full.tdn_status;
                        var visible = "True";
                        if (status === "Active" && visible === "True") {
                            return '<button type="button" onclick="deleteTreatmentNote(' + full.tdnId + ')" class="btn btn-sm btn-outline-danger">Delete</button>';
                        }
                        else {
                            return ''
                        }
                    }
                }
            ],
            order: [[1, 'asc']],
            buttons: [
                {
                    extend: 'excel',
                    title: 'Treatment Notes',
                    footer: 'true',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, node, config);
                        exportLogs("Employee Exported Treatment Notes to Excel!");
                    }
                },
                {
                    extend: 'pdf',
                    title: 'Treatment Notes',
                    footer: 'true',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, node, config);
                        exportLogs("Employee Exported Treatment Notes to PDF!");
                    }
                },
                {
                    extend: 'csv',
                    title: 'Treatment Notes',
                    footer: 'true',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, node, config);
                        exportLogs("Employee Exported Treatment Notes to CSV!");
                    }
                },
                {
                    extend: 'print',
                    title: 'Treatment Notes',
                    footer: 'true',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, node, config);
                        exportLogs("Employee Printed Treatment Notes!");
                    }
                }
            ],
            language: {
                searchPlaceholder: 'Search...',
                sSearch: '<span class="text-primary font-weight-semi-bold">Search By CPT Code / Treatment Notes / Status</span>',
                lengthMenu: '_MENU_',
                scrollX: "100%"
            }
        });
        table.buttons().container().appendTo('#tbl_treatment_notes_wrapper .col-md-6:eq(0)');
    }
    //#endregion

    //#region Add Treatment Note
    function addTreatmentNote() {
        $.ajax({
            type: "GET",
            url: "@Url.Action("CreateTreatmentNotes", "TreatmentNotes", new { area = "Masters" })",
            contentType: "application/json",
            dataType: "html",
            success: function (data) {
                $("#treatment_notes_body").html(data);
                $("#treatment_notes_modal").modal("show");
            },
            error: function (xhr) {
                console.log("Error while Adding Treatment Note : " + xhr.statusText);
            }
        });
    }
    //#endregion

    //#region Edit Treatment Note
    function editTreatmentNote(tdnId) {
        $.ajax({
            type: "GET",
            url: "@Url.Action("EditTreatmentNotes", "TreatmentNotes", new { area = "Masters" })?tdnId=" + tdnId,
            contentType: "application/json",
            dataType: "html",
            success: function (data) {
                $("#treatment_notes_body").html(data);
                $("#treatment_notes_modal").modal("show");
            },
            error: function (xhr) {
                console.log("Error while Adding Treatment Note : " + xhr.statusText);
            }
        });
    }
    //#endregion

    //#region Update Status
    var updateStatus = function (tdnId, tdn_status) {
        tdn_status = (tdn_status == "Deleted" || tdn_status == "Inactive") ? "Active" : "Inactive"

        Swal.fire({
            title: "Are you sure you want to change status ?",
            text: "This action will change the status of the selected Treatment Note!",
            icon: "question",
            showCancelButton: !0,
            confirmButtonText: 'Yes! I Confirm',
            cancelButtonText: 'No! Cancel Please',
            confirmButtonClass: "btn btn-success mt-2", cancelButtonClass: "btn btn-danger ms-2 mt-2", buttonsStyling: !1
        }).then(function (t) {
            if (t.value) {
                $.ajax({
                    url: "@Url.Action("UpdateTreatmentNoteStatus", "TreatmentNotes", new { area = "Masters" })?tdnId=" + tdnId + "&tdn_status=" + tdn_status,
                    type: "POST",
                    dataType: "json",
                    success: function (data) {
                        if (data.isAuthorized) {
                            if (data.success) {
                                GetTreatmentNotes();

                                Swal.fire({
                                    title: "Success!",
                                    text: data.message,
                                    icon: "success",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197"
                                });
                            }
                            else {
                                Swal.fire({
                                    title: "Action Forbidden!",
                                    text: data.message,
                                    icon: "error",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197"
                                });
                            }
                        }
                        else {
                            Swal.fire({
                                title: "Access Denied!",
                                text: "You do not have enough privileges to change Treatment Note Status!",
                                icon: "error",
                                showCancelButton: 0,
                                confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                            });
                        }
                    },
                    error: function (xhr) {
                        console.log(xhr);
                        Swal.fire({
                            title: "Error!",
                            text: "Failed to Update Treatment Note Status! Please refresh the Page and Try Again.",
                            icon: "error",
                            showCancelButton: 0,
                            confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                        })
                    }
                });
            }
        });
    }
    //#endregion

    //#region Delete Treatment Notes
    var deleteTreatmentNote = function (tdnId) {
        Swal.fire({
            title: "Are you sure you want to delete this Treatment Note ?",
            text: "This action will delete this Treatment Note!",
            icon: "question",
            showCancelButton: !0,
            confirmButtonText: 'Yes! I Confirm',
            cancelButtonText: 'No! Cancel Please',
            confirmButtonClass: "btn btn-success mt-2", cancelButtonClass: "btn btn-danger ms-2 mt-2", buttonsStyling: !1
        }).then(function (t) {
            if (t.value) {
                $.ajax({
                    url: '@Url.Action("DeleteTreatmentNote", "TreatmentNotes", new { area = "Masters" })?tdnId=' + tdnId +'&tdn_status=Deleted',
                    type: "POST",
                    dataType: "JSON",
                    success: function (data) {
                        if (data.isAuthorized) {
                            if (data.success) {
                                GetTreatmentNotes();
                                Swal.fire({
                                    title: "Success!",
                                    text: data.message,
                                    icon: "success",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197"
                                });
                            }
                            else {
                                Swal.fire({
                                    title: "Action Forbidden!",
                                    text: data.message,
                                    icon: "error",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197"
                                });
                            }
                        }
                        else {
                            Swal.fire({
                                title: "Access Denied!",
                                text: "You do not have enough privileges to Delete Notes!",
                                icon: "error",
                                showCancelButton: 0,
                                confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                            });
                        }
                    },
                    error: function (xhr) {
                        Swal.fire({
                            title: "Error!",
                            text: "Failed to Delete Treatment Note! Please refresh the Page & Try Again.",
                            icon: "error",
                            showCancelButton: 0,
                            confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                        });
                    }
                });
            }
        });
    }
    //#endregion

    //#region Export General Logs
    var exportLogs = function (desc) {
        $.ajax({
            type: "POST",
            url: "@Url.Action("ExportLogs", "AuditLogs", new { area = "Common" })?desc="+ desc,
            contentType: "application/json",
            dataType: "json"
        });
    }
    //#endregion

    //#region Alert Timeout
    function Timeout() {
        window.setTimeout(function () {
            $(".alert").fadeTo(500, 0).slideUp(500, function () {
                $(this).remove();
            });
        }, 4200);
    }
    //#endregion
    </script>
}
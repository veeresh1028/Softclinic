@model IEnumerable<BusinessEntities.Accounts.Accounting.ChartOfAccounts>
@using System.Security.Claims;

@{
    ViewBag.Title = "Accounts & Material Management - Chart of Accounts";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var claims = ClaimsPrincipal.Current.Identities.First().Claims.ToList();
    var empId = claims.Where(c => c.Type == ClaimTypes.Sid).Select(c => c.Value).SingleOrDefault();
    var emp_name = claims.Where(c => c.Type == ClaimTypes.GivenName).Select(c => c.Value).SingleOrDefault();
    var emp_dept = claims.Where(c => c.Type == ClaimTypes.Locality).Select(c => c.Value).SingleOrDefault();
    var emp_department = claims.Where(c => c.Type == ClaimTypes.Surname).Select(c => c.Value).SingleOrDefault();
    var emp_designation = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).SingleOrDefault();
    var company = claims.Where(c => c.Type == ClaimTypes.PrimarySid).Select(c => c.Value).SingleOrDefault();
    var emp_branch = claims.Where(c => c.Type == ClaimTypes.GroupSid).Select(c => c.Value).SingleOrDefault();
}

<div class="page-header">
    <div class="page-leftheader">
        <h4 class="page-title mb-0 text-primary">Chart of Accounts</h4>
    </div>
    <div class="page-rightheader">
        <div class="btn-list">
            <button class="btn btn-outline-primary mb-2" type="button" data-bs-toggle="collapse" data-bs-target="#searchFilter" aria-expanded="false" aria-controls="collapseExample">
                <i class="fa fa-filter"></i> Advanced Filters
            </button>
            <a id="btn_Add_Category" data-bs-toggle="modal" data-bs-target="#add_account_modal" class="btn btn-secondary" onclick="addAccount()"><i class="mdi mdi-plus"></i>&nbsp;Add Chart of Account</a>
        </div>
    </div>
</div>

<div class="row mt-2 mb-2">
    <div class="col-12 col-sm-12 col-md-12 d-flex justify-content-center">
        <div id="AccountsAlert"></div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 col-md-12 col-lg-12">
        <div class="card mb-0">
            <div class="card-status bg-primary-1"></div>
            <div class="collapse" id="searchFilter">
                <div class="card-body">
                    <div class="row">
                        <div class="col-sm-6 col-md-4 col-lg-3">
                            <div class="form-group mb-2">
                                <label class="form-label font-weight-semibold">Branch<small>(es)</small></label>
                                <select class="form-control" id="select_branch" multiple="multiple">
                                </select>
                            </div>
                        </div>
                        <div class="col-sm-6 col-md-4 col-lg-3">
                            <div class="form-group mb-2">
                                <label class="form-label font-weight-semibold">Account Period</label>
                                <select class="form-control" id="select_period">
                                </select>
                            </div>
                        </div>
                        <div class="col-sm-6 col-md-4 col-lg-3">
                            <div class="form-group mb-2">
                                <label class="form-label font-weight-semibold">Account Group<small>(s)</small></label>
                                <select class="form-control" id="select_group" multiple="multiple">
                                </select>
                            </div>
                        </div>
                        <div class="col-sm-6 col-md-4 col-lg-3">
                            <div class="form-group mb-2">
                                <label class="form-label font-weight-semibold">Account Categor<small>(y/ies)</small></label>
                                <select class="form-control" id="select_category" multiple="multiple">
                                </select>
                            </div>
                        </div>
                        <div class="col-sm-6 col-md-4 col-lg-2">
                            <div class="form-group mb-2">
                                <label class="form-label font-weight-semibold">From Date</label>
                            </div>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        <i class="fe fe-calendar"></i>
                                    </div>
                                </div>
                                <input id="select_date_from" class="form-control" placeholder="Select Date From" type="text" autocomplete="off">
                            </div>
                        </div>
                        <div class="col-sm-6 col-md-4 col-lg-2">
                            <div class="form-group mb-2">
                                <label class="form-label font-weight-semibold">To Date</label>
                            </div>
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="input-group-text">
                                        <i class="fe fe-calendar"></i>
                                    </div>
                                </div>
                                <input id="select_date_to" class="form-control" placeholder="Select Date To" type="text" autocomplete="off">
                            </div>
                        </div>
                        <div class="col-sm-6 col-md-4 col-lg-2">
                            <div class="form-group mb-2">
                                <label class="form-label font-weight-semibold">&nbsp;</label>
                                <button class="btn btn-primary mb-2" type="button" id="btnSearch">
                                    <i class="fa fa-search-plus"></i>&nbsp;Search
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 col-md-12 col-lg-12">
        <div class="card">
            <div class="card-body">
                <div id="progress-loader" style="display:none;">
                    <div class="progress progress-sm mb-3">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-teal progress-bar-indeterminate"></div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table id="tbl_chart_of_accounts" class="table table-striped table-bordered table-hover text-nowrap resize-table" style="width: 100%;">
                        <thead>
                            <tr style="color: #fff !important; background-color: #3C457D; border-color: #3C457D; ">
                                <th class="border-bottom-0 font-weight-semibold text-white">Branch</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Code</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Category</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Account</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Debit</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Credit</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Closing Balance</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Code</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Group</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Id</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Category</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Status</th>
                                <th class="border-bottom-0 font-weight-semibold text-white"><i class="fe fe-more-vertical" style="font-size: 20px;"></i></th>
                            </tr>
                        </thead>
                        <tfoot>
                            <tr>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th class="text-right fs-17 text-primary font-weight-bold">Total :</th>
                                <th class="text-end fs-16 font-weight-bold"></th>
                                <th class="text-end fs-16 font-weight-bold"></th>
                                <th class="text-end fs-16 font-weight-bold"></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                                <th></th>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Create Chart of Accounts Modal-->
<div class="modal fade" id="add_account_modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" id="sizeCCOA">
        <div class="modal-content" id="add_account_modal_body">
        </div>
    </div>
</div>

<!--Update Chart of Accounts Modal-->
<div class="modal fade" id="edit_account_modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" id="sizeU">
        <div class="modal-content" id="edit_account_modal_body">
        </div>
    </div>
</div>

<!--Chart of Accounts Audit Log Modal-->
<div class="modal fade overflow-auto" id="audit_logs_modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" data-modal-from="account_period_logs" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" id="sizeL">
        <div class="modal-content" id="audit_logs_body">
        </div>
    </div>
</div>

<!--Create Accounting Group Modal-->
<div class="modal fade" id="add_group_modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" id="sizeAG">
        <div class="modal-content" id="add_group_modal_body">
        </div>
    </div>
</div>

<!--Create Accounting Category Modal-->
<div class="modal fade" id="add_category_modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" id="sizeC">
        <div class="modal-content" id="add_category_modal_body">
        </div>
    </div>
</div>

<!-- Modal Account Details -->
<div class="modal fade overflow-auto" id="account_details" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content" id="account_details_body">
        </div>
    </div>
</div>

@section myScripts{
    <script type="text/javascript">
        //#region Page Load
        $(function () {
            load_filters();
        });
        //#endregion

        //#region Load Advanced Filters
        var load_filters = function () {
            load_branches();

            load_periods();

            $('#select_group').SumoSelect({
                placeholder: 'Select Group(s)',
                captionFormat: '{0} Group(s) Selected',
                captionFormatAllSelected: 'All {0} Groups selected!',
                csvDispCount: 3,
                okCancelInMulti: true,
                isClickAwayOk: true,
                search: true,
                searchText: 'Search here...',
                selectAll: true
            });

            $('#select_category').SumoSelect({
                placeholder: 'Select Categor(y/ies)',
                captionFormat: '{0} Group(s) Selected',
                captionFormatAllSelected: 'All {0} Groups selected!',
                csvDispCount: 3,
                okCancelInMulti: true,
                isClickAwayOk: true,
                search: true,
                searchText: 'Search here...',
                selectAll: true
            });
        }

        // Load Branches
        var load_branches = function () {
            $('#select_branch').SumoSelect({
                placeholder: 'Select Branch(es)',
                captionFormat: '{0} Branch(es) Selected',
                captionFormatAllSelected: 'All {0} Branches selected!',
                csvDispCount: 3,
                okCancelInMulti: true,
                isClickAwayOk: true,
                search: true,
                searchText: 'Search here...',
                selectAll: true
            });

            $.ajax({
                url: '@Url.Action("GetBranches", "AccountGroups", new { area = "Accounts" })',
                type: "GET",
                dataType: "json",
                async: false,
                success: function (response) {
                    $('#select_branch').html('');
                    $('#select_branch')[0].sumo.reload();

                    if ("@emp_designation.ToString()" != "Super Administrator") {
                        $('#select_branch')[0].sumo.add(@emp_branch.ToString(), "@company.ToString()");
                        $('#select_branch')[0].sumo.selectItem(["@emp_branch.ToString()"]);
                    }
                    else {
                        $.each(response, function (j) {
                            $('#select_branch')[0].sumo.add(response[j].id, response[j].text);
                            $('#select_branch')[0].sumo.selectItem(["@emp_branch.ToString()"]);
                        });
                    }
                },
                error: function (xhr) {
                    console.log("Failed! Error Message : " + xhr.statusText);
                }
            }).done(function () {
                $('#select_branch')[0].sumo.reload();

                $('#select_branch').on('change', function () {
                    load_groups();
                });
            });
        }

        // Load Periods
        var load_periods = function () {
            $("#select_period").select2({
                placeholder: 'Select Period',
                width: '100%',
                minimumResultsForSearch: '',
                maximumInputLength: 10,
                escapeMarkup: function (markup) {
                    return markup;
                }
            });

            $.ajax({
                url: '@Url.Action("GetActiveAccountPeriods", "AccountPeriods", new { area = "Accounts" })',
                dataType: 'json',
                delay: 250,
                data: function (query) {
                    return {
                        query: query.term,
                        type: 0
                    };
                },
                processResults: function (data) {
                    return {
                        results: data
                    };
                },
                cache: true
            }).done(function (response) {
                var select2 = $("#select_period");
                select2.empty();

                $.each(response, function (index, item) {
                    select2.append(new Option(item.text, item.id, false, false));
                });

                var firstOption = response[0];
                if (firstOption) {
                    select2.val(firstOption.id).trigger({
                        type: 'select2:select',
                        params: {
                            data: firstOption
                        }
                    });
                }

                getChartofAccounts();
            });
        }

        // Load Groups Based on Period
        $('#select_period').on('select2:select', function (e) {
            var inputString = e.params.data.text;

            var datePattern = /\[(\d{2}\/[a-zA-Z]+\/\d{4}) - (\d{2}\/[a-zA-Z]+\/\d{4})\]/;

            var matches = inputString.match(datePattern);

            if (matches && matches.length === 3) {
                var startDate = matches[1];
                var endDate = matches[2];

                startDate = moment(startDate, 'DD/MMM/YYYY');
                endDate = moment(endDate, 'DD/MMM/YYYY');

                $('#select_date_from').bootstrapdatepicker('destroy');
                $('#select_date_to').bootstrapdatepicker('destroy');

                $('#select_date_from').bootstrapdatepicker({
                    format: "dd-MM-yyyy",
                    viewMode: "date",
                    todayHighlight: true,
                    autoclose: true,
                    multidate: false,
                    multidateSeparator: "-",
                    startDate: new Date(startDate),
                    endDate: new Date(endDate)
                });
                $("#select_date_from").bootstrapdatepicker("setDate", moment(startDate).format("DD-MM-YYYY"));

                $('#select_date_to').bootstrapdatepicker({
                    format: "dd-MM-yyyy",
                    viewMode: "date",
                    todayHighlight: true,
                    autoclose: true,
                    multidate: false,
                    multidateSeparator: "-",
                    startDate: new Date(startDate),
                    endDate: new Date(endDate)
                });
                $("#select_date_to").bootstrapdatepicker("setDate", moment(endDate).format("DD-MM-YYYY"));

                $('#select_date_from').keypress(function (e) {
                    var charCode = (e.which) ? e.which : e.keyCode
                    if (String.fromCharCode(charCode).match(/[^0-9./-]/g)) {
                        return false;

                    }
                    else {
                        if (e.target.value.length >= 18)
                            return false;
                    }
                });

                $('#select_date_to').keypress(function (e) {
                    var charCode = (e.which) ? e.which : e.keyCode
                    if (String.fromCharCode(charCode).match(/[^0-9./-]/g)) {
                        return false;

                    }
                    else {
                        if (e.target.value.length >= 18)
                            return false;
                    }
                });
            }
            else {
                console.log("Invalid A/C Period Date");
            }

            load_groups();
        });

        $('#select_period').on('select2:unselecting', function () {
            $('#select_group').html('');
            $('#select_group')[0].sumo.reload();
        });

        var load_groups = function () {
            if ($('#select_period').val() != null && $('#select_branch').val().toString() != "") {
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetAccountGroupsByBranchPeriod", "AccountGroups", new { area = "Accounts" })?ag_period=' + $('#select_period').val() + "&ag_branch=" + $('#select_branch').val().toString(),
                    dataType: 'json',
                    success: function (response) {
                        $('#select_group').html('');
                        $('#select_group')[0].sumo.reload();

                        if (response.length > 0) {
                            $.each(response, function (j) {
                                $('#select_group')[0].sumo.add(response[j].id, response[j].text);
                            });
                        }
                    },
                    error: function (xhr) {
                        console.log(xhr);
                        console.log("Failed to Load Groups! Error Message : " + xhr.statusText);
                    }
                }).done(function () {
                    $('#select_group')[0].sumo.reload();
                });
            }
            else {
                $('#select_group').html('');
                $('#select_group')[0].sumo.reload();
            }
        }

        // Load Categories Based on Group
        $('#select_group').on('change', function (e) {
            if ($("#select_group").val().toString() != "" && $("#select_period").val() != "" && $('#select_branch').val().toString() != "") {

                var _data = {
                    "Branches": $('#select_branch').val().toString(),
                    "Period": $('#select_period').val(),
                    "Groups": $('#select_group').val().toString()
                }

                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetCategories", "AccountCategories", new { area = "Accounts" })',
                    dataType: 'json',
                    data: _data,
                    success: function (response) {
                        $('#select_category').html('');
                        $('#select_category')[0].sumo.reload();

                        $.each(response, function (j) {
                            $('#select_category')[0].sumo.add(response[j].id, response[j].text);
                        });

                        $('#select_category')[0].sumo.reload();
                    },
                    error: function (xhr) {
                        console.log("Failed! Error Message : " + xhr.statusText);
                    }
                });
            }
            else {
                $('#select_category').html('');
                $('#select_category')[0].sumo.reload();
            }
        });
        //#endregion

        //#region Search Chart of Accounts
        $("#btnSearch").click(function (e) {
            e.preventDefault();

            if ($("#select_branch").val() != null && $("#select_branch").val() != 0 && $("#select_branch").val() != "") {
                if (($("#select_period").val() != null && $("#select_period").val() != 0 && $("#select_period").val() != "") ||
                    ($("#select_group").val() != null && $("#select_group").val() != 0 && $("#select_group").val() != "") ||
                    ($("#select_category").val() != null && $("#select_category").val() != 0 && $("#select_category").val() != "")) {

                    let isValid = true;
                    let date_frm = moment($("#select_date_from").val(), "DD-MMMM-YYYY");
                    let date_to = moment($("#select_date_to").val(), "DD-MMMM-YYYY");

                    // Check if Date From is a valid Date
                    if ($("#select_date_from").val() != null && $("#select_date_from").val() != 0 && $("#select_date_from").val() != "" && $("#select_date_from").val() != undefined) {
                        if (!date_frm.isValid()) {
                            isValid = false;
                            e.stopPropagation();

                            return $.growl.error({
                                title: "Error",
                                message: "Invalid From Date!"
                            });
                        }
                    }

                    // Check if Date To is a valid Date
                    if ($("#select_date_to").val() != null && $("#select_date_to").val() != 0 && $("#select_date_to").val() != "" && $("#select_date_to").val() != undefined) {
                        if (!date_to.isValid()) {
                            isValid = false;
                            e.stopPropagation();

                            return $.growl.error({
                                title: "Error",
                                message: "Invalid To Date!"
                            });
                        }
                    }

                    // Check if Date Range is valid
                    if (($("#select_date_from").val() != null && $("#select_date_from").val() != 0 && $("#select_date_from").val() != "" && $("#select_date_from").val() != undefined) && ($("#select_date_to").val() != null && $("#select_date_to").val() != 0 && $("#select_date_to").val() != "" && $("#select_date_to").val() != undefined)) {
                        if (date_frm.isValid() && date_to.isValid()) {
                            if (date_to.diff(date_frm, 'days') < 0) {
                                isValid = false;

                                var index = [];
                                index.push("select_date_from");
                                index.push("select_date_to");

                                $.each(index, function (i, v) {
                                    if (index[i] != null && index[i] != "") {
                                        var elem = $("#" + index[i]);
                                        if (elem.hasClass("select2-hidden-accessible")) {
                                            $("#select2-" + elem.attr("id") + "-container").parent().addClass('error');
                                        }
                                        else {
                                            $(elem).addClass(" is-invalid");
                                        }

                                        setTimeout(function () {
                                            if (elem.hasClass("select2-hidden-accessible")) {
                                                $("#select2-" + elem.attr("id") + "-container").parent().removeClass('error');
                                            }
                                            else {
                                                $(elem).removeClass("is-invalid");
                                            }
                                        }, 5000);
                                    }
                                });

                                e.stopPropagation();

                                return $.growl.error({
                                    title: "Error!",
                                    message: "From Date Filter should be less than To Date Filter!"
                                });
                            }
                        }
                    }

                    // Check If Valid
                    if (isValid) {
                        getChartofAccounts();
                    }
                }
                else {
                    Swal.fire({
                        title: "Attention!",
                        text: "Search by Either of the following filters : Account Period / Group(s) / Categor(y/ies)",
                        icon: "warning",
                        showCancelButton: 0,
                        confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60"
                    });
                }
            }
            else {
                Swal.fire({
                    title: "Attention!",
                    text: "You need to select atleast 1 Branch to Filter Chart of Accounts!",
                    icon: "warning",
                    showCancelButton: 0,
                    confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60"
                });
            }
        });
        //#endregion

        //#region Load Chart of Accounts
        function getChartofAccounts() {
            var branch = "";

            if ("@emp_designation.ToString()" != "Super Administrator") {
                branch = @emp_branch.ToString();
            }
            else {
                branch = $('#select_branch').val().toString();
            }

            var _data = {
                "select_branch": branch,
                "select_period": $("#select_period :selected").val(),
                "select_group": $("#select_group").val().toString(),
                "select_category": $("#select_category").val().toString(),
                "select_date_from": $("#select_date_from").val().toString(),
                "select_date_to": $("#select_date_to").val().toString(),
            }

            $.ajax({
                type: "GET",
                url: "@Url.Action("GetChartOfAccounts", "ChartOfAccounts", new { area = "Accounts" })",
                beforeSend: function () {
                    $('#progress-loader').show();
                },
                data: _data,
                success: function (response) {
                    if (response.isAuthorized) {
                        var table;
                        if ($.fn.dataTable.isDataTable('#tbl_chart_of_accounts')) {
                            table = $('#tbl_chart_of_accounts').DataTable();
                            table.clear();
                            table.rows.add(response.coa_list).draw();
                        }
                        else {
                            BindDataTable(response.coa_list);
                        }
                    }
                    $('#progress-loader').hide();
                },
                error: function (xhr) {
                    console.log(xhr);
                    $('#progress-loader').hide();
                }
            });
        }
        //#endregion

        //#region Bind Datatable
        var BindDataTable = function (response) {
            var numberRenderer = $.fn.dataTable.render.number(',', '.', 2,).display;

            var table = $("#tbl_chart_of_accounts").DataTable({
                fixedHeader: {
                    header: true,
                    footer: true
                },
                processing: true,
                "paging": false,
                "retrieve": true,
                lengthChange: true,
                scrollX: true,
                scrollY: 500,
                scrollCollapse: true,
                "aaData": response,
                "aoColumns": [
                    {
                        "mData": "set_company"
                    },
                    {
                        "mData": "acc_code"
                    },
                    {
                        "mData": "ac_category"
                    },
                    {
                        "mData": "acc_name"
                    },
                    {
                        "mData": "total_debit",
                        "className": "text-end fs-12 font-weight-semibold",
                        "render": $.fn.dataTable.render.number(',', '.', 2)
                    },
                    {
                        "mData": "total_credit",
                        "className": "text-end fs-12 font-weight-semibold",
                        "render": $.fn.dataTable.render.number(',', '.', 2)
                    },
                    {
                        "mData": "acc_cbal",
                        "className": "text-end fs-12 font-weight-semibold",
                        "render": $.fn.dataTable.render.number(',', '.', 2)
                    },
                    {
                        "mData": "ag_code",
                        "visible": false
                    },
                    {
                        "mData": "ag_group",
                        "visible": false
                    },
                    {
                        "mData": "acId",
                        "visible": false
                    },
                    {
                        "mData": "ac_category",
                        "visible": false
                    },
                    {
                        "mData": "acc_status",
                        "className": 'text-center',
                        "render": function (acc_status, type, full, meta) {
                            var visible = full.actionvisible;

                            var acc_status = full.acc_status;

                            if (visible == "True") {
                                if (acc_status === "Active") {
                                    return '<button type="button" class="badge rounded-pill bg-success mt-2 border-success" style="width: 60px;">Active</button>';
                                }
                                else if (acc_status === "Inactive") {
                                    return '<button type="button" class="badge rounded-pill bg-warning mt-2 border-warning" style="width: 60px;">Inactive</button>';
                                }
                                else if (acc_status === "Deleted") {
                                    return '<button type="button" class="badge rounded-pill bg-danger mt-2 border-danger" style="width: 60px;">Deleted</button>';
                                }
                                else {
                                    return ''
                                }
                            }
                            else {
                                return '<span class="badge rounded-pill text-danger mt-2 border-danger">Allocated</span>'
                            }
                        }
                    },
                    {
                        "orderable": false,
                        "searchable": false,
                        "mData": "accId",
                        "className": 'text-center',
                        "render": function (accId, type, full, meta) {
                            var visible = full.actionvisible;
                            var acc_status = full.acc_status;

                            var more = '<div class="dropdown"><a type="button" class="" data-bs-toggle="dropdown"><i class="fe fe-more-vertical" style="font-size: 20px;"></i></a>' +
                                '<div class="dropdown-menu" style="min-width:auto">';

                            more += '<a class="dropdown-item text-dark fw-bold cursor" href="javascript:void(0)" onclick="viewAccountsDetails(' + accId + ',\'' + full.acc_code + '\',\'' + full.acc_name + '\',\'' + full.acc_gtype + '\',\'' + full.acc_period + '\')"><i class="fa fa-info-circle text-dark" style="font-size: 15px;margin-right: 0.5rem;"></i>&nbsp;Details</a>';

                            if (visible == "True" && acc_status === "Active") {
                                more += '<a class="dropdown-item text-dark fw-bold" style="cursor:pointer" onclick="editAccount(\'' + accId + '\')"><i class="fe fe-edit-2 text-success" style="font-size: 15px;margin-right: 0.5rem;"></i>&nbsp;Edit</a>';
                            }

                            more += '<a class="dropdown-item text-dark fw-bold" style="cursor:pointer" onclick="viewAuditLogs(\'' + accId + '\')"><i class="fe fe-eye" style="font-size: 15px;margin-right: 0.5rem;color:#046058 !important"></i>&nbsp;Logs</a>' +
                                    '</div></div>';

                            return more;
                        }
                    }
                ],
                buttons: [
                    {
                        extend: 'excel',
                        title: 'Chart of Accounts',
                        footer: 'true',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5, 6]
                        },
                        action: function (e, dt, node, config) {
                            //$.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, node, config);
                            exportToExcel();
                            exportLogs("Employee Exported Chart of Accounts to Excel!");
                        }
                    },
                    {
                        extend: 'pdf',
                        title: 'Chart of Accounts',
                        footer: 'true',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5, 6]
                        },
                        action: function (e, dt, node, config) {
                            $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, node, config);
                            exportLogs("Employee Exported Chart of Accounts to PDF!");
                        }
                    },
                    {
                        extend: 'csv',
                        title: 'Chart of Accounts',
                        footer: 'true',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5, 6]
                        },
                        action: function (e, dt, node, config) {
                            $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, node, config);
                            exportLogs("Employee Exported Chart of Accounts to CSV!");
                        }
                    },
                    {
                        extend: 'print',
                        title: 'Chart of Accounts',
                        footer: 'true',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4, 5, 6]
                        },
                        action: function (e, dt, node, config) {
                            $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, node, config);
                            exportLogs("Employee Printed Chart of Accounts!");
                        }
                    }
                ],
                language: {
                    searchPlaceholder: 'Search...',
                    zeroRecords: "No Record(s) Found",
                    infoEmpty: "No Record(s) Available",
                    sSearch: '<span class="text-primary font-weight-semi-bold">Search By Group / Category / Type / Status</span>',
                    scrollX: "100%",
                    lengthMenu: '_MENU_ ',
                    sEmptyTable: '<span class="text-secondary">No Record(s) Available Based On Request</span>',
                },
                drawCallback: function (settings) {
                    var api = this.api();
                    var rows = api.rows({ page: 'current' }).nodes();
                    var lastAgCode = null;
                    var lastAcId = null;

                    api.column(8, { page: 'current' }).data().each(function (agCode, i) {
                        if (lastAgCode !== agCode) {
                            $(rows).eq(i).before(
                                '<tr class="group font-weight-bold fs-17"><td colspan="9" class="bg-gray-light"> <span class="">Group Name :</span> <span class=" text-primary">' + agCode + '</span></td></tr>'
                            );
                            lastAgCode = agCode;
                        }

                        var currentAcId = api.cell(i, 10).data();
                        if (lastAcId !== currentAcId) {
                            $(rows).eq(i).before(
                                '<tr class="subgroup font-weight-semibold"><td colspan="9" class="bg-gray-lighter"><span class="fs-15 ms-2">Category :</span> <span class=" text-secondary">' + currentAcId + '</span></td></tr>'
                            );
                            lastAcId = currentAcId;
                        }
                    });
                },
                footerCallback: function (row, data, start, end, display) {
                    var api = this.api();

                    // Remove the formatting to get integer data for summation
                    var intVal = function (i) {
                        return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : 0;
                    };

                    var total = api.column(4).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                    $(api.column(4).footer()).html(numberRenderer(total.toFixed(2)));

                    total = api.column(5).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                    $(api.column(5).footer()).html(numberRenderer(total.toFixed(2)));

                    total = api.column(6).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                    $(api.column(6).footer()).html(numberRenderer(total.toFixed(2)));
                },
            });

            table.buttons().container().appendTo('#tbl_chart_of_accounts_wrapper .col-md-6:eq(0)');
        }
        //#endregion

        //#region Add Chart of Accounts
        function addAccount() {
            $("#spinner2").show();
           $.ajax({
                type: "GET",
                url: "@Url.Action("CreateChartOfAccounts", "ChartOfAccounts", new { area = "Accounts" })",
                contentType: "application/json",
                dataType: "html",
                success: function(data) {
                    $("#add_account_modal_body").html(data);
                    $("#add_account_modal").modal("show");
                },
                error : function (xhr) {
                    console.log(xhr);
                    $("#spinner2").hide();
               },
               complete: function () {
                   // Hide spinner when request is complete
                   $("#spinner2").hide();
               }

            });
        }
        //#endregion

        //#region Edit Chart of Accounts
        function editAccount(accId) {
            $("#spinner2").show();
            $.ajax({
                type: "GET",
                url: "@Url.Action("EditChartOfAccount", "ChartOfAccounts", new { area = "Accounts" })?accId=" + accId,
                contentType: "application/json",
                dataType: "html",
                success: function(data) {
                    $("#edit_account_modal_body").html(data);
                    $("#edit_account_modal").modal("show");
                },
                error : function (xhr) {
                    console.log(xhr);
                    $("#spinner2").hide();
                },
                complete: function () {
                    // Hide spinner when request is complete
                    $("#spinner2").hide();
                }

            });
        }
        //#endregion

        //#region Chart of Accounts Audit Logs
        var viewAuditLogs = function (accId) {
            $("#spinner2").show();
            $.ajax({
                type: "GET",
                url: "@Url.Action("ChartOfAccountsAuditLogs", "ChartOfAccounts", new { area = "Accounts" })?accId=" + accId,
                contentType: "application/json",
                dataType: "html",
                success: function (data) {
                    $("#audit_logs_body").html(data);
                    $("#audit_logs_modal").modal("show");
                },
                error: function (xhr) {
                    console.log(xhr);
                    $("#spinner2").hide();
                },
                complete: function () {
                    // Hide spinner when request is complete
                    $("#spinner2").hide();
                }

            });
        };
        //#endregion

        //#region View Account Detailed View
        var viewAccountsDetails = function (accId, acc_code, acc_name, acc_gtype, acc_period) {
            $("#spinner2").show();
            $.ajax({
                type: "GET",
                url: "@Url.Action("ViewAccountDetails", "ChartOfAccounts", new { area = "Accounts" })?accId=" + accId + "&acc_code=" + acc_code + "&acc_name=" + acc_name + "&acc_gtype=" + acc_gtype + "&acc_period=" + acc_period,
                contentType: "application/json",
                dataType: "html",
                success: function (data) {
                    $("#account_details_body").html(data);
                    $("#account_details").modal("show");
                },
                error: function (xhr) {
                    console.log(xhr);
                    $("#spinner2").hide();
                },
                complete: function () {
                    // Hide spinner when request is complete
                    $("#spinner2").hide();
                }

            });
        };
        //#endregion

        //#region Export General Logs
        var exportLogs = function (desc) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("ExportLogs", "AuditLogs", new { area = "Common" })?desc="+ desc,
                contentType: "application/json",
                dataType: "json"
            });
        }
        //#endregion

        //#region Alert Timeout
        function Timeout() {
            window.setTimeout(function () {
                $(".alert").fadeTo(500, 0).slideUp(500, function () {
                    $(this).remove();
                });
            }, 4200);
        }
        //#endregion
    </script>
    <!-- Include table2excel library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js"></script>
    <script>
        function exportToExcel() {
            var table = document.getElementById('tbl_chart_of_accounts');
            var wb = XLSX.utils.table_to_book(table, { sheet: "Sheet1" });
            XLSX.writeFile(wb, 'ChartofAccount.xlsx');
        }
    </script>
}
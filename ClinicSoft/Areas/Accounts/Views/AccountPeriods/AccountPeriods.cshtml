@model IEnumerable<BusinessEntities.Accounts.Accounting.AccountPeriod>
@{
    ViewBag.Title = "Accounts & Material Management - Account Periods";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-header">
    <div class="page-leftheader">
        <h4 class="page-title mb-0 text-primary">Account Periods</h4>
    </div>
    <div class="page-rightheader">
        <div class="btn-list">
            <a id="btn_Add_Period" data-bs-toggle="modal" data-bs-target="#period_add_modal" class="btn btn-secondary" onclick="addAccountPeriod()"><i class="mdi mdi-plus"></i>&nbsp;Add Account Period</a>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12 col-sm-12 col-md-12 d-flex justify-content-center">
        <div id="AccountPeriodAlert"></div>
    </div>
    <div class="col-sm-12 col-md-12 col-lg-12">
        <div class="card">
            <div class="card-body">
                <div id="progress-loader" style="display:none;">
                    <div class="progress progress-sm mb-3">
                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-teal progress-bar-indeterminate"></div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table id="tbl_period" class="table table-striped table-bordered text-nowrap resize-table" style="width: 100%; cursor: pointer;">
                        <thead>
                            <tr style="color: #fff !important; background-color: #3C457D; border-color: #3C457D; ">
                                <th class="border-bottom-0 font-weight-semibold text-white">Code</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Name</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Period From Date</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Period To Date</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Status</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Delete</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Logs</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Create Accounting Period Modal-->
<div class="modal fade" id="period_add_modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" data-modal-from="account_period" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" id="sizeC">
        <div class="modal-content" id="period_add_modal_body">
        </div>
    </div>
</div>
<!--Update Accounting Period Modal-->
<div class="modal fade" id="period_edit_modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" data-modal-from="account_period" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" id="sizeU">
        <div class="modal-content" id="period_edit_modal_body">
        </div>
    </div>
</div>
<!--Accounting Period Audit Log Modal-->
<div class="modal fade overflow-auto" id="audit_logs_modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" data-modal-from="account_period_logs" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" id="sizeL">
        <div class="modal-content" id="audit_logs_body">
        </div>
    </div>
</div>

@section myScripts{
    <script type="text/javascript">
        //#region Page Load
        $(function () {
            getAccountPeriods();
        });
        //#endregion

        //#region Load Account Period
        function getAccountPeriods() {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetAccountPeriods", "AccountPeriods", new { area = "Accounts" })",
                beforeSend: function () {
                    $('#progress-loader').show();
                },
                success: function (response) {
                    if (response.isAuthorized) {
                        var table;
                        if ($.fn.dataTable.isDataTable('#tbl_period')) {
                            table = $('#tbl_period').DataTable();
                            table.clear();
                            table.rows.add(response.ap_list).draw();
                        }
                        else {
                            BindDataTable(response.ap_list);
                        }
                    }

                    $('#progress-loader').hide();
                },
                error: function (xhr) {
                    console.log(xhr);
                    $('#progress-loader').hide();
                }
            })
        }
        //#endregion

        //#region Bind Datatable
        var BindDataTable = function (response) {
            var table = $("#tbl_period").DataTable({
                fixedHeader: {
                    header: true,
                    footer: true
                },
                processing: true,
                "deferRender": true,
                "pageLength": 100,
                "retrieve": true,
                lengthChange: true,
                scrollX: true,
                scrollY: 500,
                scrollCollapse: true,
                "aaData": response,
                "aoColumns": [
                    {
                        "mData": "ap_code"
                    },
                    {
                        "mData": "ap_name"
                    },
                    {
                        "mData": "ap_fdate",
                        "orderable": false,
                        "searchable": false
                    },
                    {
                        "mData": "ap_tdate",
                        "orderable": false,
                        "searchable": false
                    },
                    {
                        "mData": "apId",
                        "className": 'text-center',
                        "render": function (apId, type, full, meta) {
                            var ap_status = full.ap_status;

                            if (ap_status === "Open") {
                                return '<button type="button" class="badge rounded-pill bg-success mt-2 border-success" style="width: 60px;">Open</button>'
                            }
                            else if (ap_status === "Closed") {
                                return '<button type="button" class="badge rounded-pill bg-warning mt-2 border-warning" style="width: 60px;" onclick="changeStatus(\'' + apId + '\',\'Closed\')">Closed</button>'
                            }
                            else if (ap_status === "Deleted") {
                                return '<button type="button" class="badge rounded-pill bg-danger mt-2 border-danger" style="width: 60px;">Deleted</button>'
                            }
                            else {
                                return ''
                            }
                        }
                    },
                    {
                        "mData": "apId",
                        "className": 'text-center',
                        "orderable": false,
                        "searchable": false,
                        "render": function (apId, type, full, meta) {
                            var status = full.ap_status;
                            var visible = full.actionvisible;

                            if (status === "Closed") {
                                if (visible === "True") {
                                    return '<button type="button" onclick="updateStatus(\'' + apId + '\',\'Deleted\')" class="btn btn-sm btn-outline-danger">Delete</button>';
                                }
                                else {
                                    return '<span class="badge rounded-pill text-danger mt-2 border-danger">Allocated</span>';
                                }
                            }
                            else {
                                return ''
                            }
                        }
                    },
                    {
                        "mData": "apId",
                        "className": 'text-center',
                        "orderable": false,
                        "searchable": false,
                        "render": function (apId, type, full, meta) {
                            return '<button type="button" onclick="viewAuditLogs(\'' + apId + '\')" class="btn btn-sm btn-outline-dark">Logs</button>';
                        }
                    },
                ],
                order: [[0, 'asc']],
                buttons: [
                    {
                        extend: 'excel',
                        title: 'Account Periods Detail',
                        footer: 'true',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4]
                        }
                    },
                    {
                        extend: 'pdf',
                        title: 'Account Periods Detail',
                        footer: 'true',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4]
                        }
                    },
                    {
                        extend: 'csv',
                        title: 'Account Periods Detail',
                        footer: 'true',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4]
                        }
                    },
                    {
                        extend: 'print',
                        title: 'Account Periods Detail',
                        footer: 'true',
                        exportOptions: {
                            columns: [0, 1, 2, 3, 4]
                        }
                    }
                ],
                language: {
                    searchPlaceholder: 'Search...',
                    zeroRecords: "No Record(s) Found",
                    infoEmpty: "No Record(s) Available",
                    sSearch: '<span class="text-primary font-weight-semi-bold">Search By Name / Code / Status</span>',
                    scrollX: "100%",
                    lengthMenu: '_MENU_ ',
                    sEmptyTable: '<span class="text-secondary">No Record(s) Available Based On Request</span>',
                },
            });

            table.buttons().container().appendTo('#tbl_period_wrapper .col-md-6:eq(0)');
        }
        //#endregion

        //#region Add Account Period
        function addAccountPeriod() {
            $("#spinner2").show();
            $.ajax({
                type: "GET",
                url: "@Url.Action("CreateAccountPeriod", "AccountPeriods", new { area = "Accounts" })",
                contentType: "application/json",
                dataType: "html",
                success: function(data) {
                    $("#period_add_modal_body").html(data);
                    $("#period_add_modal").modal("show");
                },
                error : function (xhr) {
                    console.log(xhr);
                    $("#spinner2").hide();
                },
                complete: function () {
                    // Hide spinner when request is complete
                    $("#spinner2").hide();
                }
            });
        }
        //#endregion

        //#region Edit Account Period
        function editAccountPeriod(agId) {
            $("#spinner2").show();
            $.ajax({
                type: "GET",
                url: "@Url.Action("EditAccountPeriod", "AccountPeriods", new { area = "Accounts" })?agId=" + agId,
                contentType: "application/json",
                dataType: "html",
                success: function(data) {
                    $("#period_edit_modal_body").html(data);
                    $("#period_edit_modal").modal("show");
                },
                error : function (xhr) {
                    console.log(xhr);
                    $("#spinner2").hide();
                },
                complete: function () {
                    // Hide spinner when request is complete
                    $("#spinner2").hide();
                }
            });
        }
        //#endregion

        //#region Change Status
        function changeStatus(agId, ag_status) {
            if (ag_status != "Deleted") {
                ag_status = (ag_status == "Closed") ? "Open" : "Closed";
            }
            else {
                ag_status = "Closed";
            }

            updateStatus(agId, ag_status)
        }
        //#endregion

        //#region Update Account Period Status
        var updateStatus = function (agId, ag_status) {
            var _title = "";
            var _text = "";

            if (ag_status == "Deleted") {
                _title = "Are you sure you want to Delete ?";
                _text = "This action will delete the selected Account Period!";
            }
            else {
                _title = "Are you sure you want to Open ?";
                _text = "This action will Open the selected Account Period!";
            }

            Swal.fire({
                title: _title,
                text: _text,
                icon: "question",
                showCancelButton: !0,
                confirmButtonText: 'Yes! I Confirm',
                cancelButtonText: 'No! Cancel Please',
                confirmButtonClass: "btn btn-success mt-2",
                cancelButtonClass: "btn btn-danger ms-2 mt-2", buttonsStyling: !1
            }).then(function (t) {
                if (t.value) {
                    $.ajax({
                        url: "@Url.Action("UpdateStatus", "AccountPeriods", new { area = "Accounts" })?agId=" + agId + "&ag_status=" + ag_status,
                        type: "POST",
                        dataType: "json",
                        success: function (data) {
                            if (data.isAuthorized) {
                                if (data.success) {
                                    Swal.fire({
                                        title: "Success!",
                                        text: "Status Changed Successfully!!",
                                        icon: "success",
                                        showCancelButton: 0,
                                        confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60"
                                    });

                                    getAccountPeriods();
                                }
                                else {
                                    Swal.fire({
                                        title: "Error!",
                                        text: data.message + "!",
                                        icon: "error",
                                        showCancelButton: 0,
                                        confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                                    });
                                }
                            }
                            else {
                                Swal.fire({
                                    title: "Access Denied!",
                                    text: "You do not have enough privileges to perform this action!",
                                    icon: "error",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                                });
                            }
                        },
                        error: function (xhr) {
                            console.log(xhr);
                            Swal.fire({
                                title: "Error!",
                                text: "Failed to Change Status! Please refresh the Page & Try Again.",
                                icon: "error",
                                showCancelButton: 0,
                                confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                            });
                        }
                    });
                }
            });
        }
        //#endregion

        //#region Account Period Audit Logs
        var viewAuditLogs = function (apId) {
            $("#spinner2").show();
            $.ajax({
                type: "GET",
                url: "@Url.Action("AccountPeriodAuditLogs", "AccountPeriods", new { area = "Accounts" })?apId=" + apId,
                contentType: "application/json",
                dataType: "html",
                success: function (data) {
                    $("#audit_logs_body").html(data);
                    $("#audit_logs_modal").modal("show");
                },
                error: function (xhr) {
                    console.log(xhr);
                    $("#spinner2").hide();
                },
                complete: function () {
                    // Hide spinner when request is complete
                    $("#spinner2").hide();
                }
            });
        };
        //#endregion

        //#region Alert Timeout
        function Timeout() {
            window.setTimeout(function () {
                $(".alert").fadeTo(500, 0).slideUp(500, function () {
                    $(this).remove();
                });
            }, 4200);
        }
        //#endregion
    </script>
}
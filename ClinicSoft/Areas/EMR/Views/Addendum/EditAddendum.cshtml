@model BusinessEntities.EMR.Addendum
@using System.Linq;
@using System.Security.Claims;
@using BusinessEntities;
@{
    var claims = ClaimsPrincipal.Current.Identities.First().Claims.ToList();
    var emp_designation = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).SingleOrDefault();
    EMRInfo emr = (EMRInfo)TempData["emr_data"];
    TempData.Keep("emr_data");
}

<form id="form_EditAddendum" class="needs-validation">

    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12 mb-4 font-weight-semibold">
            <span class='badge bg-danger'>Required</span>
            <span class="text-info" style="font-size:smaller">Please Fill atlest One Entry</span>
        </div>
    </div>
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.addeId)
    @Html.HiddenFor(m => m.adde_appId)
    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12">
            <div style="display: flex; align-items: center;">
                <button type="button" class="btn btn-purple me-5" id="ubtn-record">
                    <i class="fa fa-microphone" aria-hidden="true"></i>&nbsp;Record
                </button>

                <span class="text-danger me-5" id="uspn-recording">
                    <i class="fa fa-microphone loader fs-15"></i>&nbsp;Recording ...&nbsp;
                </span>

                <div class="text-success  me-5 text-bold" id="uspn-recording-timer">00:00:00</div>

                <button type="button" class="btn btn-info me-5" id="ubtn-pause" value="pause">
                    <i class="fa fa-pause" aria-hidden="true"></i>&nbsp;Pause
                </button>

                <button type="button" class="btn btn-danger me-5" id="ubtn-stop">
                    <i class="fa fa-stop" aria-hidden="true"></i>&nbsp;Stop
                </button>

                <audio id="uaudio_file" class="me-5" controls>
                    Your browser does not support the audio element.
                </audio>

                <button type="button" class="btn btn-success" id="ubtn-speech-to-text">
                    <i class="fa fa-language" aria-hidden="true"></i>&nbsp;Speech To Text
                </button>

            </div>
        </div>
        <div class="col-sm-12 col-md-12 col-lg-12">
            <div class="form-group mb-3">
                <label class="form-label text-black">Addendum For&nbsp;</label>
                @Html.DropDownListFor(m => m.adde_for, new List<SelectListItem> { }, "Select Adddendum For", new { @class = "form-select  mb-2 select2", @id = "uadde_for" })
            </div>
        </div>
        <div class="col-sm-12 col-md-12 col-lg-12">
            <div class="form-group mb-3">
                <label class="form-label text-black">Addendum&nbsp;<span class="text-danger">*</span></label>
                <div class="ql-wrapper ql-wrapper-demo">
                    <div id="uaddendum">

                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-sm-12 col-md-12 col-lg-12 text-center">
            <div class="btn-list btn-animation">
                <button type="submit" class="btn btn-warning" id="btn_Update_Addendum">Save Changes</button>
                <button type="button" class="btn btn-outline-danger me-1" id="btn_Close_Editadden">
                    Close
                </button>
            </div>
        </div>
    </div>
</form>
<script type="text/javascript">
    //#region Partial View Onload

    'use strict';

    var timerInterval;
    var startTime;
    var elapsedTime = 0;
    var timerElement = $('#uspn-recording-timer');
    var uquill;
    $(function () {
        $("#ubtn-record").html('<i class="fa fa-microphone" aria-hidden="true"></i>&nbsp;Record');
        $("#ubtn-record").show();
        $("#uspn-recording").hide();
        $("#uspn-recording-timer").hide();
        $("#ubtn-pause").hide();
        $("#ubtn-stop").hide();
        $("#ubtn-speech-to-text").hide();
        $("#uaudio_file").hide();

        if ("@emp_designation.ToString()" === "Super Administrator") {
            $("#btn_Update_Addendum").show();
            }
            else {
                if ("@emr.set_emr_lock" == "NoLock") {
                    $("#btn_Update_Addendum").show();

                }
                else {
                    if ("@emr.app_ae_date" >= "@emr.today") {
                        $("#btn_Update_Addendum").show();
                    }
                    else {
                        $("#btn_Update_Addendum").hide();
                    }
                }
            }

        load_Addendums("@Model.adde_for_name");

        $("#uadde_for").select2({
            placeholder: 'Select For',
            width: '100%',
            minimumResultsForSearch: '',
            minimumInputLength: 3,
            dropdownParent: $('#form_EditAddendum'),

            ajax: {
                url: '@Url.Action("GetEMRTabMaster", "Addendum", new { area = "EMR" })',
                dataType: 'json',
                delay: 250,
                data: function (query) {
                    return {
                        query: query.term,
                    };
                },
                processResults: function (data) {
                    console.log(data);

                    return {
                        results: data,
                    };
                },
                cache: true
            }
        });
        uquill = new Quill('#uaddendum', {
            modules: {
                toolbar:
                    [[{
                        'header': [1, 2, 3, 4, 5, 6, false]
                    }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{
                        'list': 'ordered'
                    }, {
                        'list': 'bullet'
                    }]]
            },
            theme: 'snow',
            placeholder: 'Write your Addendum here.....',
        });
        var realHTML = $('<textarea />').html("@Model.adde_notes").text();
        uquill.root.innerHTML = realHTML;

        validate();
    });
    //#endregion Partial View Onload
    //#region Close
        $('#btn_Close_Editadden').click(function () {
            $('#addendum_edit').hide();
            $("#addendum_add").show();

        });
    //#endregion Close
        $("#ubtn-record").on('click', function () {
        startRecording();

        $("#ubtn-pause").html('<i class="fa fa-pause" aria-hidden="true"></i> &nbsp;Pause');
        $("#ubtn-pause").removeClass("btn btn-success me-5");
        $("#ubtn-pause").addClass("btn btn-info me-5");

        $("#uspn-recording").removeClass("text-info me-5");
        $("#uspn-recording").addClass("text-danger me-5");
        $("#uspn-recording").html(' <i class="fa fa-microphone font-size-15"></i>&nbsp;Recording ...&nbsp;');

        $("#ubtn-record").hide();
        $("#uspn-recording").show();
        $("#uspn-recording-timer").show();
        $("#ubtn-pause").show();
        $("#ubtn-stop").show();
        $("#ubtn-speech-to-text").hide();
        $("#uaudio_file").hide();

        startTime = new Date().getTime();
        timerInterval = setInterval(updateTimer, 1000);

            clearControls();
    });

    $("#ubtn-pause").on('click', function () {
        let btn_mode = $(this).val();
        btn_mode = (btn_mode === "pause") ? "play" : "pause";
        $(this).val(btn_mode);

        if (btn_mode === "play") {
            if (isRecording && mediaRecorder) {
                mediaRecorder.pause();
                isRecording = false;
            }

            $("#ubtn-pause").html('<i class="fa fa-play" aria-hidden="true"></i> &nbsp;Resume');
            $("#ubtn-pause").removeClass("btn btn-info me-5");
            $("#ubtn-pause").addClass("btn btn-success me-5");


            // Pause the timer
            $("#uspn-recording").removeClass("text-danger me-5");
            $("#uspn-recording").addClass("text-info me-5");
            $("#uspn-recording").html('<i class="fa fa-microphone font-size-15"></i>&nbsp;Recorded ...&nbsp;');
            clearInterval(timerInterval);
            elapsedTime += new Date().getTime() - startTime;
        }
        else {
            if (!isRecording && mediaRecorder) {
                mediaRecorder.resume();
                isRecording = true;
            }

            $("#ubtn-pause").html('<i class="fa fa-pause" aria-hidden="true"></i> &nbsp;Pause');
            $("#ubtn-pause").removeClass("btn btn-success me-5");
            $("#ubtn-pause").addClass("btn btn-info me-5");

            // Resume the timer
            $("#uspn-recording").removeClass("text-info me-5");
            $("#uspn-recording").addClass("text-danger me-5");
            $("#uspn-recording").html(' <i class="fa fa-microphone font-size-15"></i>&nbsp;Recording ...&nbsp;');
            startTime = new Date().getTime();
            timerInterval = setInterval(updateTimer, 1000);
        }

        $("#ubtn-record").hide();
        $("#ubtn-pause").show();
        $("#ubtn-stop").show();
        $("#ubtn-speech-to-text").hide();
        $("#uaudio_file").hide();
    });

    $("#ubtn-stop").on('click', function () {
        stopRecording();
        $("#ubtn-record").show();
        $("#ubtn-record").html('<i class="fa fa-microphone" aria-hidden="true"></i>&nbsp;Re-Record');
        $("#uspn-recording").hide();
        $("#uspn-recording-timer").hide();
        $("#ubtn-pause").hide();
        $("#ubtn-pause").val("pause");
        $("#ubtn-stop").hide();
        $("#ubtn-speech-to-text").show();
        $("#uaudio_file").hide();

        clearInterval(timerInterval);
        timerElement.text("00:00:00");
        elapsedTime = 0;
    });

    function updateTimer() {
        var currentTime = new Date().getTime();
        var totalMilliseconds = currentTime - startTime + elapsedTime;

        // Calculate hours, minutes, and seconds
        var hours = Math.floor(totalMilliseconds / 3600000);
        var minutes = Math.floor((totalMilliseconds % 3600000) / 60000);
        var seconds = Math.floor((totalMilliseconds % 60000) / 1000);

        // Format the time as HH:MM:SS
        var formattedTime = padNumber(hours) + ':' + padNumber(minutes) + ':' + padNumber(seconds);

        // Update the timer element
        timerElement.text(formattedTime);
    }

    function padNumber(number) {
        return number.toString().padStart(2, '0');
    }

    $("#ubtn-speech-to-text").on('click', function () {
        $("#ubtn-speech-to-text").html('<i class="fa fa-circle-o-notch fa-spin"></i>&nbsp;Processing...');
        // Create a Blob from the recorded chunks
        const audioBlob = new Blob(recordedChunks, { type: 'audio/wav' });

        var formData = new FormData();
        formData.append('audio', audioBlob, 'audio.wav');

        recordedChunks = [];
        isRecording = false;
        stream = null;
        mediaRecorder = null;

        // Send the FormData to the server using AJAX
        $.ajax({
            type: "POST",
            url: "@Url.Action("SaveAudio", "SpeechToText", new { area = "RnD" })",
            dataType: 'json',
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                $("#ubtn-speech-to-text").html('<i class="fa fa-language" aria-hidden="true"></i>&nbsp;Speech To Text');


                if (response.isConverted) {
                    if (response.isSuccess) {
                        uquill.root.innerHTML = uquill.root.innerHTML + " " +response.data.speechtext
                    }
                }

            },
            error: function (xhr, status, error) {
                $("#ubtn-speech-to-text").html('<i class="fa fa-language" aria-hidden="true"></i>&nbsp;Speech To Text');
                console.error(error);
                console.log(error);
            }
        });
    });



    // Function to start recording
    function startRecording() {
        // Request access to the microphone
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(function (audioStream) {
                // Store the microphone stream
                stream = audioStream;

                // Create a MediaRecorder instance
                mediaRecorder = new MediaRecorder(stream);

                // Event handler for data available
                mediaRecorder.addEventListener('dataavailable', function (event) {
                    if (event.data.size > 0) {
                        recordedChunks.push(event.data);
                    }
                });

                // Start recording
                mediaRecorder.start();
                isRecording = true;
            })
            .catch(function (err) {
                console.error('Error accessing microphone:', err);
            });
    }

    function stopRecording() {
        // Stop the MediaRecorder
        if (mediaRecorder) {
            mediaRecorder.stop();
        }

        // Stop the microphone stream
        if (stream) {
            stream.getTracks().forEach(function (track) {
                track.stop();
            });
        }
        isRecording = false;
    }
     //#region Load Items
    var load_Addendums = function (adde_for_name) {
        $.ajax({
            url: '@Url.Action("GetEMRTabMaster", "Addendum", new { area = "EMR" })?query=' + adde_for_name,
            type: "GET",
            dataType: "json",
            async: false,
            success: function (response) {
                var data = {
                    "id": response[0].id,
                    "text": response[0].text,
                };

                var newOption = new Option(response[0].text, response[0].id, true, true);
                console.log(newOption);
                $('#uadde_for').append(newOption).trigger('change');
                $('#uadde_for').trigger({
                    type: 'select2:select',
                    params: {
                        data: data
                    }
                });
            },
            error: function (xhr) {
                console.log(xhr);
            }
        });
    };
    //#endregion
    //#endregion load Addendum

    //#region Update CPT Code Item Mapping Click
        $('#btn_Update_Addendum').on('click', function (e) {
            e.preventDefault();
            var isvalid = true;

            if (quill.getText().trim().length == 0) {
                $("#uaddendum").attr("style", "border:1px solid red;");
                error_timeout_quil($("#uaddendum"));
                isvalid = false;
            }
            if ($("#form_EditAddendum").valid()) {
                if (isvalid) {
                    $('#btn_Update_Addendum').removeClass("btn btn-warning");
                    $('#btn_Update_Addendum').addClass("btn btn-warning btn-loaders btn-icon");
                    $('#btn_Update_Addendum').parent().addClass("curdrop");
                    $('.btnCloseEdit').addClass("disabled");
                    $('#btn_Update_Addendum').html("Saving Changes... Please Wait");

                    var _dataUpdate = {
                        "addeId": $("#addeId").val(),
                        "adde_appId": $("#adde_appId").val(),
                        "adde_for": $("#uadde_for option:selected").val(),
                        "adde_notes": uquill.root.innerHTML,
                        "__RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    }

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("UpdateAddendum", "Addendum", new {area = "EMR" })",
                        dataType: 'json',
                        data: _dataUpdate,
                        success: function (data) {
                            $('#btn_Update_Addendum').parent().removeClass("curdrop");
                            $('.btnCloseEdit').removeClass("disabled");
                            $('#btn_Update_Addendum').removeClass("btn btn-warning btn-loaders btn-icon");
                            $('#btn_Update_Addendum').addClass("btn btn-warning");
                            $('#btn_Update_Addendum').html("Save Changes");

                            if (data.isSuccess) {
                                if (data.isUpdated) {
                                    var alertPlaceholder = document.getElementById("Alert");
                                    function alert(e, t) {
                                        var l = document.createElement("div");
                                        l.innerHTML = '<div class="alert alert-' + t + ' alert-dismissible" role="alert">' + e +
                                            '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-hidden="Close">x</button></div>', alertPlaceholder.append(l)
                                    }
                                    alert("<i class='fe fe-check-circle text-white'></i> Addendum Updated Successfully!", "success");
                                    clearControls();
                                    Timeout();
                                    GetAddendum();
                                    GetPreviousAddendum
                                    $("#addendum_edit").hide();
                                    $("#addendum_add").show();
                                }
                                else {
                                    let html = "<div class='col-12 col-sm-12 col-md-12 d-flex justify-content-center'>" +
                                        "<div class='alert alert-warning' role='alert'>" +
                                        "<button type='button' class='btn-close mr-negative-16' data-bs-dismiss='alert' aria-hidden='true' aria-label='Close'>×</button>" +
                                        "<strong>Warning.. Addendum Alredy Exists..</strong><br/>" +
                                        "</div></div>";
                                    $("#error").html(html);
                                }
                            }
                            else {
                                let html = "<div class='col-12 col-sm-12 col-md-12 d-flex justify-content-center'>" +
                                    "<div class='alert alert-danger' role='alert'>" +
                                    "<button type='button' class='btn-close mr-negative-16' data-bs-dismiss='alert' aria-hidden='true' aria-label='Close'>×</button>" +
                                    "<strong>Validation Error.. Please correct before you submit the form!&nbsp;</strong><br/><ul>";
                                $.each(data.message, function (index, value) {
                                    html += "<li><small>" + value + "</small><li>";
                                    var elem = $("#" + index);
                                    if (elem.hasClass("select2-hidden-accessible")) {
                                        $("#select2-" + elem.attr("id") + "-container").parent().addClass('error');
                                    }
                                    else {
                                        $(elem).addClass(" is-invalid");
                                    }

                                    setTimeout(function () {
                                        if (elem.hasClass("select2-hidden-accessible")) {
                                            $("#select2-" + elem.attr("id") + "-container").parent().removeClass('error');
                                        }
                                        else {
                                            $(elem).removeClass("is-invalid");
                                        }
                                    }, 5000);
                                });
                                html += "</ul></div></div>";
                                $("#error").html(html);
                            }
                        },
                        error: function (xhr) {
                            $('#btn_Update_Addendum').parent().removeClass("curdrop");
                            $('.btnCloseEdit').removeClass("disabled");
                            $('#btn_Update_Addendum').removeClass("btn btn-warning btn-loaders btn-icon");
                            $('#btn_Update_Addendum').addClass("btn btn-warning");
                            $('#btn_Update_Addendum').html("Save Changes");

                            Timeout();
                        }
                    });
                }
            }
            else {
                $('.modal-body').animate({
                    scrollTop: ($('.has-error').offset().top - 300)
                }, 2000);
            }
        });
    //#endregion

    //#region Validation Initialization
    var validate = function () {

        $("#form_EditAddendum").validate({
            rules: {

                uadde_for: {
                    required: true
                },
            },
            messages: {
                uadde_for: {
                    required: "Please select Addendum For!"
                },
            },
            highlight: function (element) {
                var elem = $(element);
                $(element).parent().addClass('has-error');
            },
            unhighlight: function (element) {
                var elem = $(element);
                $(element).parent().removeClass('has-error');
            },
            errorElement: 'span',
            errorClass: 'text-danger fw-bold',
            errorPlacement: function (error, element) {
                var elem = $(element);
                if (element.parent('.input-group').length) {
                    error.insertAfter(element.parent());
                } else {
                    error.insertAfter(element);
                }
            }
        });
        $('#uadde_for').on('change', function () {
            $(this).trigger('blur');
        });

    }
    //#endregion Validation Initialization
</script>
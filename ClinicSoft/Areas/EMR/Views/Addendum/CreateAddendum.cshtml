@model BusinessEntities.EMR.Addendum
@using System.Linq;
@using System.Security.Claims;
@using BusinessEntities;
@{
    var claims = ClaimsPrincipal.Current.Identities.First().Claims.ToList();
    var emp_designation = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).SingleOrDefault();
    EMRInfo emr = (EMRInfo)TempData["emr_data"];
    TempData.Keep("emr_data");
}

<form id="form_Add_Addendum" class="needs-validation" >
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-12">
            <div style="display: flex; align-items: center;">
                <button type="button" class="btn btn-purple me-5" id="btn-record">
                    <i class="fa fa-microphone" aria-hidden="true"></i>&nbsp;Record
                </button>

                <span class="text-danger me-5" id="spn-recording">
                    <i class="fa fa-microphone loader fs-15"></i>&nbsp;Recording ...&nbsp;
                </span>

                <div class="text-success  me-5 text-bold" id="spn-recording-timer">00:00:00</div>

                <button type="button" class="btn btn-info me-5" id="btn-pause" value="pause">
                    <i class="fa fa-pause" aria-hidden="true"></i>&nbsp;Pause
                </button>

                <button type="button" class="btn btn-danger me-5" id="btn-stop">
                    <i class="fa fa-stop" aria-hidden="true"></i>&nbsp;Stop
                </button>

                <audio id="audio_file" class="me-5" controls>
                    Your browser does not support the audio element.
                </audio>

                <button type="button" class="btn btn-success" id="btn-speech-to-text">
                    <i class="fa fa-language" aria-hidden="true"></i>&nbsp;Speech To Text
                </button>

            </div>
        </div>
        <div class="col-sm-12 col-md-12 col-lg-12 mb-4 font-weight-semibold">
            <span class='badge bg-danger'>Required</span>
            <span class="text-info" style="font-size:smaller">Please Fill atlest One Entry</span>
        </div>
    </div>
    <div class="row">
        <div class="col-md-7">

        </div>
        <div class="col-sm-12 col-md-12 col-lg-12">
            <div class="form-group mb-3">
                <label class="form-label text-black">Addendum For&nbsp;<span class="text-danger">*</span></label>
                @Html.DropDownListFor(m => m.adde_for, new List<SelectListItem> { }, "Select Adddendum For", new { @class = "form-select  mb-2 select2", @id = "adde_for" })
            </div>
        </div>
        <div class="col-sm-12 col-md-12 col-lg-12">
            <div class="form-group mb-3">
                <label class="form-label text-black">Addendum&nbsp;<span class="text-danger">*</span></label>
                <div class="ql-wrapper ql-wrapper-demo">
                    <span class="errorr text-danger fw-bold"></span>
                    <div id="addendum">

                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-sm-12 col-md-12 col-lg-12 text-center">
            <div class="btn-list btn-animation">
                <button type="submit" class="btn btn-success" id="btn_Insert_Addendum">Add</button>
                <button type="button" class="btn btn-outline-dark" id="btn_Reset_addendum">Reset</button>
                <button type="button" class="btn btn-outline-danger me-1" id="btn_Close_addendum" style="display:none">
                    Close
                </button>
            </div>
        </div>
    </div>
</form>
<script type="text/javascript">
    //#region Partial View Onload
    var quill;
    'use strict';

    var timerInterval;
    var startTime;
    var elapsedTime = 0;
    var timerElement = $('#spn-recording-timer');
    let audioElement = $("#audio_file");

    let stream;
    let mediaRecorder;
    let recordedChunks = [];
    let isRecording = false;
    $(function () {
        $("#btn-record").html('<i class="fa fa-microphone" aria-hidden="true"></i>&nbsp;Record');
        $("#btn-record").show();
        $("#spn-recording").hide();
        $("#spn-recording-timer").hide();
        $("#btn-pause").hide();
        $("#btn-stop").hide();
        $("#btn-speech-to-text").hide();
        $("#audio_file").hide();
    if ("@emp_designation.ToString()" === "Super Administrator") {
                $("#btn_Insert_Addendum").show();
            }
            else {
                if ("@emr.set_emr_lock" == "NoLock") {
                    $("#btn_Insert_Addendum").show();

                }
                else {
                    if ("@emr.app_ae_date" >= "@emr.today") {
                        $("#btn_Insert_Addendum").show();
                    }
                    else {
                        $("#btn_Insert_Addendum").hide();
                    }
                }
            }
        var icons = Quill.import('ui/icons');
        icons['bold'] = '<i class="fa fa-bold" aria-hidden="true"><\/i>';
        icons['italic'] = '<i class="fa fa-italic" aria-hidden="true"><\/i>';
        icons['underline'] = '<i class="fa fa-underline" aria-hidden="true"><\/i>';
        icons['strike'] = '<i class="fa fa-strikethrough" aria-hidden="true"><\/i>';
        icons['list']['ordered'] = '<i class="fa fa-list-ol" aria-hidden="true"><\/i>';
        icons['list']['bullet'] = '<i class="fa fa-list-ul" aria-hidden="true"><\/i>';

        var toolbarOptions = [
            [{
                'header': [1, 2, 3, 4, 5, 6, false]
            }],
            ['bold', 'italic', 'underline', 'strike'],
            [{
                'list': 'ordered'
            }, {
                'list': 'bullet'
            }]

        ];

        quill = new Quill('#addendum', {
            modules: {
                toolbar: toolbarOptions
            },
            theme: 'snow'
        });
        $("#adde_for").select2({
            placeholder: 'Select For',
            width: '100%',
            minimumResultsForSearch: '',
            minimumInputLength: 3,
            dropdownParent: $('#form_Add_Addendum'),

            ajax: {
                url: '@Url.Action("GetEMRTabMaster", "Addendum", new { area = "EMR" })',
                dataType: 'json',
                delay: 250,
                data: function (query) {
                    return {
                        query: query.term,
                    };
                },
                processResults: function (data) {
                    console.log(data);

                    return {
                        results: data,
                    };
                },
                cache: true
            }
        });
        validate();
        /*clearControls();*/
    });

    //#region Reset
        $('#btn_Reset_addendum').on('click', function (e) {
            e.preventDefault();
            clearControls();
        });
    //#endregion Reset


    //#region Clear Controls
        var clearControls = function () {
            quill.root.innerHTML = "";
            $("#adde_for option:selected").val(0);
        }
    //#endregion Clear Controls


      $("#btn-record").on('click', function () {
    startRecording();

    $("#btn-pause").html('<i class="fa fa-pause" aria-hidden="true"></i> &nbsp;Pause');
    $("#btn-pause").removeClass("btn btn-success me-5");
    $("#btn-pause").addClass("btn btn-info me-5");

    $("#spn-recording").removeClass("text-info me-5");
    $("#spn-recording").addClass("text-danger me-5");
    $("#spn-recording").html(' <i class="fa fa-microphone font-size-15"></i>&nbsp;Recording ...&nbsp;');

    $("#btn-record").hide();
    $("#spn-recording").show();
    $("#spn-recording-timer").show();
    $("#btn-pause").show();
    $("#btn-stop").show();
    $("#btn-speech-to-text").hide();
    $("#audio_file").hide();

    startTime = new Date().getTime();
    timerInterval = setInterval(updateTimer, 1000);

     clearControls();
});

$("#btn-pause").on('click', function () {
    let btn_mode = $(this).val();
    btn_mode = (btn_mode === "pause") ? "play" : "pause";
    $(this).val(btn_mode);

    if (btn_mode === "play") {
        if (isRecording && mediaRecorder) {
            mediaRecorder.pause();
            isRecording = false;
        }

        $("#btn-pause").html('<i class="fa fa-play" aria-hidden="true"></i> &nbsp;Resume');
        $("#btn-pause").removeClass("btn btn-info me-5");
        $("#btn-pause").addClass("btn btn-success me-5");


        // Pause the timer
        $("#spn-recording").removeClass("text-danger me-5");
        $("#spn-recording").addClass("text-info me-5");
        $("#spn-recording").html('<i class="fa fa-microphone font-size-15"></i>&nbsp;Recorded ...&nbsp;');
        clearInterval(timerInterval);
        elapsedTime += new Date().getTime() - startTime;
    }
    else {
        if (!isRecording && mediaRecorder) {
            mediaRecorder.resume();
            isRecording = true;
        }

        $("#btn-pause").html('<i class="fa fa-pause" aria-hidden="true"></i> &nbsp;Pause');
        $("#btn-pause").removeClass("btn btn-success me-5");
        $("#btn-pause").addClass("btn btn-info me-5");

        // Resume the timer
        $("#spn-recording").removeClass("text-info me-5");
        $("#spn-recording").addClass("text-danger me-5");
        $("#spn-recording").html(' <i class="fa fa-microphone font-size-15"></i>&nbsp;Recording ...&nbsp;');
        startTime = new Date().getTime();
        timerInterval = setInterval(updateTimer, 1000);
    }

    $("#btn-record").hide();
    $("#btn-pause").show();
    $("#btn-stop").show();
    $("#btn-speech-to-text").hide();
    $("#audio_file").hide();
});

$("#btn-stop").on('click', function () {
    stopRecording();
    $("#btn-record").show();
    $("#btn-record").html('<i class="fa fa-microphone" aria-hidden="true"></i>&nbsp;Re-Record');
    $("#spn-recording").hide();
    $("#spn-recording-timer").hide();
    $("#btn-pause").hide();
    $("#btn-pause").val("pause");
    $("#btn-stop").hide();
    $("#btn-speech-to-text").show();
    $("#audio_file").hide();

    clearInterval(timerInterval);
    timerElement.text("00:00:00");
    elapsedTime = 0;
});

function updateTimer() {
    var currentTime = new Date().getTime();
    var totalMilliseconds = currentTime - startTime + elapsedTime;

    // Calculate hours, minutes, and seconds
    var hours = Math.floor(totalMilliseconds / 3600000);
    var minutes = Math.floor((totalMilliseconds % 3600000) / 60000);
    var seconds = Math.floor((totalMilliseconds % 60000) / 1000);

    // Format the time as HH:MM:SS
    var formattedTime = padNumber(hours) + ':' + padNumber(minutes) + ':' + padNumber(seconds);

    // Update the timer element
    timerElement.text(formattedTime);
}

function padNumber(number) {
    return number.toString().padStart(2, '0');
}

$("#btn-speech-to-text").on('click', function () {
    $("#btn-speech-to-text").html('<i class="fa fa-circle-o-notch fa-spin"></i>&nbsp;Processing...');
    // Create a Blob from the recorded chunks
    const audioBlob = new Blob(recordedChunks, { type: 'audio/wav' });

    var formData = new FormData();
    formData.append('audio', audioBlob, 'audio.wav');

    recordedChunks = [];
    isRecording = false;
    stream = null;
    mediaRecorder = null;

    // Send the FormData to the server using AJAX
    $.ajax({
        type: "POST",
        url: "@Url.Action("SaveAudio", "SpeechToText", new { area = "RnD" })",
        dataType: 'json',
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
            $("#btn-speech-to-text").html('<i class="fa fa-language" aria-hidden="true"></i>&nbsp;Speech To Text');


            if (response.isConverted) {
                if (response.isSuccess) {
                    quill.root.innerHTML = response.data.speechtext
                }
            }
            //if (response.status == 200) {
            //    var editor = $find("<%=nurse_notes.ClientID%>"); //get a reference to RadEditor client object
            //    editor.set_html("<p>" + response.speechtext + "</p>");
            //    $("#voicenote_path").val(response.filepath + "/" + response.filename);

            //    $("#audio_file").show();
            //    var audioUrl = $("#voicenote_path").val();
            //    var audioPlayer = $("#audio_file")[0];
            //    audioPlayer.src = audioUrl;

            //    $("#btn-record").html('<i class="fa fa-microphone" aria-hidden="true"></i>&nbsp;Re-Record');
            //    $("#btn-record").show();
            //    $("#spn-recording").hide();
            //    $("#spn-recording-timer").hide();
            //    $("#btn-pause").hide();
            //    $("#btn-stop").hide();
            //    $("#btn-speech-to-text").hide();
            //}
            //else {
            //    alert(response.error);
            //    console.error(response.error);
            //}


            console.log(response);
        },
        error: function (xhr, status, error) {
            $("#btn-speech-to-text").html('<i class="fa fa-language" aria-hidden="true"></i>&nbsp;Speech To Text');
            console.error(error);
            console.log(error);
        }
    });
});

// Function to start recording
function startRecording() {
    // Request access to the microphone
    navigator.mediaDevices.getUserMedia({ audio: true })
        .then(function (audioStream) {
            // Store the microphone stream
            stream = audioStream;

            // Create a MediaRecorder instance
            mediaRecorder = new MediaRecorder(stream);

            // Event handler for data available
            mediaRecorder.addEventListener('dataavailable', function (event) {
                if (event.data.size > 0) {
                    recordedChunks.push(event.data);
                }
            });

            // Start recording
            mediaRecorder.start();
            isRecording = true;
        })
        .catch(function (err) {
            console.error('Error accessing microphone:', err);
        });
}

function stopRecording() {
    // Stop the MediaRecorder
    if (mediaRecorder) {
        mediaRecorder.stop();
    }

    // Stop the microphone stream
    if (stream) {
        stream.getTracks().forEach(function (track) {
            track.stop();
        });
    }
    isRecording = false;
}


    //#region Validation Initialization
    var validate = function () {

        $("#form_Add_Addendum").validate({
            rules: {

                adde_for: {
                    required: true
                },
            },
            messages: {
                adde_for: {
                    required: "Please select Addendum For!"
                },
            },
            highlight: function (element) {
                var elem = $(element);
                if (elem.hasClass("select2-hidden-accessible")) {
                    $("#select2-" + elem.attr("id") + "-container").parent().addClass('error');
                }
                else {
                    elem.parent().addClass('has-error');
                }
                $(element).parent().addClass('has-error');
                error_timeout(elem.attr("id"));
            },
            unhighlight: function (element) {
                var elem = $(element);
                if (elem.hasClass("select2-hidden-accessible")) {
                    $("#select2-" + elem.attr("id") + "-container").parent().removeClass('error');
                } else {
                    elem.removeClass('has-error');
                }
                $(element).parent().removeClass('has-error');
            },
        });
        $('#adde_for').on('change', function () {
            $(this).trigger('blur');
        });

    }
    //#endregion Validation Initialization

    //#region Insert Button Click
        $('#btn_Insert_Addendum').on('click', function (e) {
            e.preventDefault();
            var isvalid = true;

            if (quill.getText().trim().length == 0) {
                $("#addendum").attr("style", "border:1px solid red;");
                error_timeout_quil($("#addendum"));
                isvalid = false;
            }

            if ($("#form_Add_Addendum").valid()) {

                if (isvalid) {
                    $('#btn_Insert_Addendum').removeClass("btn btn-success");
                    $('#btn_Insert_Addendum').addClass("btn btn-success btn-loaders btn-icon");
                    $('#btn_Insert_Addendum').html("Saving the Record....");

                        var _dataInsert = {
                        "addeId": 0,
                        "adde_appId": @emr.appId,
                        "adde_for": $("#adde_for option:selected").val(),
                         "adde_notes": quill.root.innerHTML,
                        "__RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    }
                    var quillContent = quill.root.innerHTML.trim();
                    console.log(quillContent);
                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("InsertAddendum", "Addendum", new { area = "EMR" })",
                        dataType: "json",
                        async: false,
                        data: _dataInsert,
                        success: function (data) {
                            $('#btn_Insert_Addendum').removeClass("btn btn-success btn-loaders btn-icon");
                            $('#btn_Insert_Addendum').addClass("btn btn-success");
                            $('#btn_Insert_Addendum').html("Add");
                            if (data.isSuccess) {
                                if (data.isInserted) {
                                    var alertPlaceholder = document.getElementById("Alert");
                                    function alert(e, t) {
                                        var l = document.createElement("div");
                                        l.innerHTML = '<div class="alert alert-' + t + ' alert-dismissible" role="alert">' + e +
                                            '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-hidden="Close">x</button></div>', alertPlaceholder.append(l)
                                    }
                                    alert("<i class='fe fe-check-circle text-white'></i> Addendum Added Successfully!", "success");
                                    clearControls();
                                    Timeout();
                                    GetAddendum();
                                    GetPreviousAddendum();
                                }
                                else {
                                    let html = "<div class='col-12 col-sm-12 col-md-12 d-flex justify-content-center'>" +
                                        "<div class='alert alert-warning' role='alert'>" +
                                        "<button type='button' class='btn-close mr-negative-16' data-bs-dismiss='alert' aria-hidden='true' aria-label='Close'>×</button>" +
                                        "<strong>Warning.. Addendum Alredy Exists..</strong><br/>" +
                                        "</div></div>";
                                    $("#error").html(html);
                                }
                            }
                            else {
                                let html = "<div class='col-12 col-sm-12 col-md-12 d-flex justify-content-center'>" +
                                    "<div class='alert alert-danger' role='alert'>" +
                                    "<button type='button' class='btn-close mr-negative-16' data-bs-dismiss='alert' aria-hidden='true' aria-label='Close'>×</button>" +
                                    "<strong>Validation Error.. Please correct before you submit the form!&nbsp;</strong><br/><ul>";
                                $.each(data.message, function (index, value) {
                                    html += "<li><small>" + value + "</small><li>";
                                    var elem = $("#" + index);
                                    if (elem.hasClass("select2-hidden-accessible")) {
                                        $("#select2-" + elem.attr("id") + "-container").parent().addClass('error');
                                    }
                                    else {
                                        $(elem).addClass(" is-invalid");
                                    }

                                    setTimeout(function () {
                                        if (elem.hasClass("select2-hidden-accessible")) {
                                            $("#select2-" + elem.attr("id") + "-container").parent().removeClass('error');
                                        }
                                        else {
                                            $(elem).removeClass("is-invalid");
                                        }
                                    }, 5000);
                                });
                                html += "</ul></div></div>";
                                $("#error").html(html);
                            }
                        },
                        error: function (xhr) {
                            $('#btn_Insert_Addendum').removeClass("btn btn-success btn-loaders btn-icon");
                            $('#btn_Insert_Addendum').addClass("btn btn-success");
                            $('#btn_Insert_Addendum').html("Add");
                            Timeout();
                        }
                    });

                }

            }
            else {
                $('.modal-body').animate({
                    scrollTop: ($('.has-error').offset().top - 300)
                }, 2000);
            }
        });
     //#endregion Insert Button Click
</script>
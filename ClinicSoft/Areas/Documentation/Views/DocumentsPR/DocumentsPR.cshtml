@using System.Linq;
@using System.Security.Claims;
@using BusinessEntities;
@{
    var claims = ClaimsPrincipal.Current.Identities.First().Claims.ToList();
    var emp_designation = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).SingleOrDefault();
    EMRInfo emr = (EMRInfo)TempData["emr_data"];
    TempData.Keep("emr_data");
    ViewBag.Title = "Index";
    Layout = "~/Areas/Documentation/Views/Shared/_Doc_layout.cshtml";
}
<div class="row">
    <div class="col-sm-12 col-md-12 col-lg-12">
        <div class="card">
            <div class="card-body">
                <div id="Documents_add">

                </div>
                <div id="Documents_edit">
                </div>
                <div id="div_pat_doc_list">
                    <div class="table-responsive">
                        <table id="tbl_doc_lists" class="table table-striped table-bordered text-nowrap resize-table" style="width: 100%; cursor: pointer;">
                            <thead>
                                <tr style="color: #fff !important; background-color: #3C457D; border-color: #3C457D; ">
                                    <th class="border-bottom-0 font-weight-semibold text-white text-center">Document</th>
                                    <th class="border-bottom-0 font-weight-semibold text-white text-center text-wrap">Description</th>
                                    <th class="border-bottom-0 font-weight-semibold text-white text-center">Uploaded By</th>
                                    <th class="border-bottom-0 font-weight-semibold text-white text-center">Uploaded Date &amp; Time</th>
                                    <th class="border-bottom-0 font-weight-semibold text-white text-center"><i class="fe fe-more-vertical" style="font-size: 20px;"></i></th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
                <div>
                    <h4 class="page-title mb-0 text-primary ">
                        Previous History
                    </h4>
                </div>
                <div class="table-responsive">
                    <table id="tbl_Predocuments" class="table table-striped table-bordered text-nowrap resize-table" style="width: 100%; cursor: pointer;">
                        <thead>
                            <tr style="color: #fff !important; background-color: #808080; border-color: #3C457D; ">
                                <th class="border-bottom-0 font-weight-semibold text-white">#</th>
                                <th class="border-bottom-0 font-weight-semibold text-white text-center">Document</th>
                                <th class="border-bottom-0 font-weight-semibold text-white text-center text-wrap">Description</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Date</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Doctor</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">License</th>
                                <th class="border-bottom-0 font-weight-semibold text-white">Date Recorded</th>
                                <th class="border-bottom-0 font-weight-semibold text-white text-center"><i class="fe fe-more-vertical" style="font-size: 20px;"></i></th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Modal View Document -->
<div class="modal fade" id="view_doc_modal" data-bs-backdrop="static" data-bs-keyboard="false" data-modal-from="patient" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" id="size">
        <div class="modal-content shadow-lg" id="view_doc_modal_body">
        </div>
    </div>
</div>
<!-- End Modal View Document-->
@*doc_refId is using as appId inside EMR TAB*@

@section myScripts{
    <script>
        //#region Page Load
        $(function () {
           GetDocuments(@emr.appId, "EMR");
           GetPreDocuments(@emr.appId, "EMR");
           AddDocuments();
        });
    //#endregion Page Load
         //#region Add Documents
        function AddDocuments() {
            $('#Documents_edit').hide();
            var x = $("#Documents_add");
            x.load("@Url.Action("CreateDocument", "Documents", new { area = "EMR" })", function () {
                $("#Documents_add").show();
            });
        }
    //#endregion Add Documents
    //#region Load Documents
    var GetDocuments = function (id, type) {
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetDocumentsById", "Patient", new { area = "Patient" })?id=" + id + "&type=" + type,
            dataType: 'json',
            success: function (response) {
                //console.log(response);
                if (response.isSuccess) {

                    var table;
                    if ($.fn.dataTable.isDataTable('#tbl_doc_lists')) {
                        table = $('#tbl_doc_lists').DataTable();
                        table.clear();
                        table.rows.add(response.message).draw();
                    }
                    else {
                        BindDataTable(response.message);
                    }
                }
            },
            error: function (xhr) {
                console.log("Error :" + xhr.statusText);
            }
        });
    }
    //#endregion Load Documents

    //#region Load Previous Documents
        var GetPreDocuments = function (id, type) {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetPreDocumentsById", "Documents", new { area = "EMR" })?id=" + id + "&type=" + type,
                dataType: 'json',
                success: function (response) {
                    //console.log(response);
                    if (response.isSuccess) {

                        var table;
                        if ($.fn.dataTable.isDataTable('#tbl_Predocuments')) {
                            table = $('#tbl_Predocuments').DataTable();
                            table.clear();
                            table.rows.add(response.message).draw();
                        }
                        else {
                            BindDataTablePre(response.message);
                        }
                    }
                },
                error: function (xhr) {
                    console.log("Error :" + xhr.statusText);
                }
            });
        }
    //#endregion Load Previous Documents

     //#region Bind DataTable
    var BindDataTable = function (response) {
        var table = $("#tbl_doc_lists").DataTable({
            processing: true,
            "pageLength": 5,
            "retrieve": true,
            lengthChange: true,
            "aaData": response,
            "aoColumns": [
                { "mData": "doc_path" },
                { "mData": "doc_label" },
                { "mData": "doc_uploadedBy_name" },
                { "mData": "doc_datecreated" },
                { "mData": "docId" }
            ],
            "aoColumnDefs": [
                {
                    "aTargets": [0],
                    "className": "fs-13",
                    "render": function (data) {
                        var html = "";
                        if (data.endsWith(".pdf")) {
                            html = '<span><svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" fill="red" class="bi bi-file-earmark-pdf" viewBox="0 0 16 16">  <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"/>  <path d="M4.603 14.087a.81.81 0 0 1-.438-.42c-.195-.388-.13-.776.08-1.102.198-.307.526-.568.897-.787a7.68 7.68 0 0 1 1.482-.645 19.697 19.697 0 0 0 1.062-2.227 7.269 7.269 0 0 1-.43-1.295c-.086-.4-.119-.796-.046-1.136.075-.354.274-.672.65-.823.192-.077.4-.12.602-.077a.7.7 0 0 1 .477.365c.088.164.12.356.127.538.007.188-.012.396-.047.614-.084.51-.27 1.134-.52 1.794a10.954 10.954 0 0 0 .98 1.686 5.753 5.753 0 0 1 1.334.05c.364.066.734.195.96.465.12.144.193.32.2.518.007.192-.047.382-.138.563a1.04 1.04 0 0 1-.354.416.856.856 0 0 1-.51.138c-.331-.014-.654-.196-.933-.417a5.712 5.712 0 0 1-.911-.95 11.651 11.651 0 0 0-1.997.406 11.307 11.307 0 0 1-1.02 1.51c-.292.35-.609.656-.927.787a.793.793 0 0 1-.58.029zm1.379-1.901c-.166.076-.32.156-.459.238-.328.194-.541.383-.647.547-.094.145-.096.25-.04.361.01.022.02.036.026.044a.266.266 0 0 0 .035-.012c.137-.056.355-.235.635-.572a8.18 8.18 0 0 0 .45-.606zm1.64-1.33a12.71 12.71 0 0 1 1.01-.193 11.744 11.744 0 0 1-.51-.858 20.801 20.801 0 0 1-.5 1.05zm2.446.45c.15.163.296.3.435.41.24.19.407.253.498.256a.107.107 0 0 0 .07-.015.307.307 0 0 0 .094-.125.436.436 0 0 0 .059-.2.095.095 0 0 0-.026-.063c-.052-.062-.2-.152-.518-.209a3.876 3.876 0 0 0-.612-.053zM8.078 7.8a6.7 6.7 0 0 0 .2-.828c.031-.188.043-.343.038-.465a.613.613 0 0 0-.032-.198.517.517 0 0 0-.145.04c-.087.035-.158.106-.196.283-.04.192-.03.469.046.822.024.111.054.227.09.346z"/></svg></span>';
                        } else {
                            html = '<span class="avatar avatar-xxl" style="background-image: url(' + data + ');border: 2px solid #d7d7d7;"></span>';
                        }
                        return '<div class="d-flex p-1 justify-content-center">' + html + '</div>';
                    }

                },
                {
                    "aTargets": [1],
                    "className": "fs-13 text-wrap"

                },
                {
                    "aTargets": [2],
                    "className": "fs-13 text-center"
                },
                {
                    "aTargets": [3],
                    "className": "fs-13 text-center",
                    "render": function (data) {
                        return moment(data).format("DD/MM/YYYY HH:mm:ss");
                    }
                },
                {
                    "aTargets": [4],
                    "className": "text-center",
                    "orderable": false,
                    "searchable": false,
                    "render": function (data) {

                        var html_links = '<div class="dropdown"><a type="button" class="" data-bs-toggle="dropdown"><i class="fe fe-more-vertical" style="font-size: 20px;"></i></a>' +
                                            '<div class="dropdown-menu" style="min-width:auto">' +
                                                '<a class="dropdown-item text-dark fw-bold" href="javascript:void(0)" onclick="view_doc(\'pat_doc\',' + data + ')"><i class="fe fe-search text-dark" style="font-size: 15px;margin-right: 0.5rem;"></i>&nbsp;View</a>' +
                                                '<a class="dropdown-item text-dark fw-bold" href="/Patient/PatientInsurance/DownloadFile?type=pat_doc&id=' + data + '"><i class="fe fe-download-cloud text-dark" style="font-size: 15px;margin-right: 0.5rem;"></i>&nbsp;Download</a>' +
                                                '<a class="dropdown-item text-dark fw-bold" href="javascript:void(0)" onclick="delete_doc(' + data + ')"><i class="fe fe-trash text-danger" style="font-size: 15px;margin-right: 0.5rem;"></i>&nbsp;Delete</a>'+
                                            '</div>' +
                                        '</div>';

                        return html_links;
                    }
                }
            ],
            order: [[3, 'desc']],
            language: {
                searchPlaceholder: 'Search...',
                sSearch: '<span class="text-primary font-weight-semi-bold">Search Document(s)</span>',
                lengthMenu: '_MENU_',
            },
            scrollX: true,
            scrollY: 500,
            scrollCollapse: true,
            fixedColumns: true,
            fixedHeader: {
                header: true,
                footer: true
            },
            buttons: [
                {
                    extend: 'excel',
                    title: 'Patient Documents',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, node, config);
                        exportLogs("Employee Exported Patient Documents with patId = @emr.appId to Excel!");
                    }
                },
                {
                    extend: 'pdf',
                    title: 'Patient Documents',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, node, config);
                        exportLogs("Employee Exported Patient Documents with patId = @emr.appId to PDF!");
                    }
                },
                {
                    extend: 'csv',
                    title: 'Patient Documents',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, node, config);
                        exportLogs("Employee Exported Patient Documents with patId = @emr.appId to CSV!");
                    }
                },
                {
                    extend: 'print',
                    title: 'Patient Documents',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, node, config);
                        exportLogs("Employee Printed Patient Documents with patId = @emr.appId Remarks!");
                    }
                }
            ]
        });
        table.buttons().container()
            .appendTo('#tbl_doc_lists_wrapper .col-md-6:eq(0)');

        setTimeout(function () {
            table.columns.adjust().draw();
        }, 350);

    }
    //#endregion Bind DataTable

     //#region Bind Previous DataTable
        var BindDataTablePre = function (response) {
            var table = $("#tbl_Predocuments").DataTable({
            processing: true,
            "pageLength": 5,
            "retrieve": true,
            lengthChange: true,
            "aaData": response,
                "aoColumns": [
                 { "mData": "docId" },
                { "mData": "doc_path" },
                { "mData": "doc_label" },
                { "mData": "app_fdate" },
                { "mData": "doctor_name" },
                { "mData": "emp_license" },
                { "mData": "doc_datecreated" },
                { "mData": "docId" },

            ],
            "aoColumnDefs": [
                {
                    "aTargets": [0],
                    "className": "fs-13",
                    "render": function (data) {
                        var html = "";
                        if (data.endsWith(".pdf")) {
                            html = '<span><svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" fill="red" class="bi bi-file-earmark-pdf" viewBox="0 0 16 16">  <path d="M14 14V4.5L9.5 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2zM9.5 3A1.5 1.5 0 0 0 11 4.5h2V14a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h5.5v2z"/>  <path d="M4.603 14.087a.81.81 0 0 1-.438-.42c-.195-.388-.13-.776.08-1.102.198-.307.526-.568.897-.787a7.68 7.68 0 0 1 1.482-.645 19.697 19.697 0 0 0 1.062-2.227 7.269 7.269 0 0 1-.43-1.295c-.086-.4-.119-.796-.046-1.136.075-.354.274-.672.65-.823.192-.077.4-.12.602-.077a.7.7 0 0 1 .477.365c.088.164.12.356.127.538.007.188-.012.396-.047.614-.084.51-.27 1.134-.52 1.794a10.954 10.954 0 0 0 .98 1.686 5.753 5.753 0 0 1 1.334.05c.364.066.734.195.96.465.12.144.193.32.2.518.007.192-.047.382-.138.563a1.04 1.04 0 0 1-.354.416.856.856 0 0 1-.51.138c-.331-.014-.654-.196-.933-.417a5.712 5.712 0 0 1-.911-.95 11.651 11.651 0 0 0-1.997.406 11.307 11.307 0 0 1-1.02 1.51c-.292.35-.609.656-.927.787a.793.793 0 0 1-.58.029zm1.379-1.901c-.166.076-.32.156-.459.238-.328.194-.541.383-.647.547-.094.145-.096.25-.04.361.01.022.02.036.026.044a.266.266 0 0 0 .035-.012c.137-.056.355-.235.635-.572a8.18 8.18 0 0 0 .45-.606zm1.64-1.33a12.71 12.71 0 0 1 1.01-.193 11.744 11.744 0 0 1-.51-.858 20.801 20.801 0 0 1-.5 1.05zm2.446.45c.15.163.296.3.435.41.24.19.407.253.498.256a.107.107 0 0 0 .07-.015.307.307 0 0 0 .094-.125.436.436 0 0 0 .059-.2.095.095 0 0 0-.026-.063c-.052-.062-.2-.152-.518-.209a3.876 3.876 0 0 0-.612-.053zM8.078 7.8a6.7 6.7 0 0 0 .2-.828c.031-.188.043-.343.038-.465a.613.613 0 0 0-.032-.198.517.517 0 0 0-.145.04c-.087.035-.158.106-.196.283-.04.192-.03.469.046.822.024.111.054.227.09.346z"/></svg></span>';
                        } else {
                            html = '<span class="avatar avatar-xxl" style="background-image: url(' + data + ');border: 2px solid #d7d7d7;"></span>';
                        }
                        return '<div class="d-flex p-1 justify-content-center">' + html + '</div>';
                    }

                },
                {
                    "aTargets": [1],
                    "className": "fs-13 text-wrap"

                },
                {
                    "aTargets": [2],
                    "className": "fs-13 text-center"
                },
                {
                    "aTargets": [3],
                    "className": "fs-13 text-center",
                    "render": function (data) {
                        return moment(data).format("DD/MM/YYYY");
                    }
                },
                {
                    "aTargets": [4],
                    "className": "fs-13 text-center"
                },
                {
                    "aTargets": [5],
                    "className": "fs-13 text-center"
                },
                {
                    "aTargets": [6],
                    "className": "fs-13 text-center",
                    "render": function (data) {
                        return moment(data).format("DD/MM/YYYY HH:mm:ss");
                    }
                },
                {
                    "aTargets": [7],
                    "className": "text-center",
                    "orderable": false,
                    "searchable": false,
                    "render": function (data) {

                        var html_links = '<div class="dropdown"><a type="button" class="" data-bs-toggle="dropdown"><i class="fe fe-more-vertical" style="font-size: 20px;"></i></a>' +
                                            '<div class="dropdown-menu" style="min-width:auto">' +
                                                '<a class="dropdown-item text-dark fw-bold" href="javascript:void(0)" onclick="view_doc(\'pat_doc\',' + data + ')"><i class="fe fe-search text-dark" style="font-size: 15px;margin-right: 0.5rem;"></i>&nbsp;View</a>' +
                                                '<a class="dropdown-item text-dark fw-bold" href="/Patient/PatientInsurance/DownloadFile?type=pat_doc&id=' + data + '"><i class="fe fe-download-cloud text-dark" style="font-size: 15px;margin-right: 0.5rem;"></i>&nbsp;Download</a>' +
                                            '</div>' +
                                        '</div>';

                        return html_links;
                    }
                }
            ],
            order: [[3, 'desc']],
            language: {
                searchPlaceholder: 'Search...',
                sSearch: '<span class="text-primary font-weight-semi-bold">Search Document(s)</span>',
                lengthMenu: '_MENU_',
            },
            scrollX: true,
            scrollY: 500,
            scrollCollapse: true,
            fixedColumns: true,
            fixedHeader: {
                header: true,
                footer: true
            },
            buttons: [
                {
                    extend: 'excel',
                    title: 'Patient Documents',
                    className: 'oldbutton',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.excelHtml5.action.call(this, e, dt, node, config);
                        exportLogs("Employee Exported Patient Documents with patId = @emr.appId to Excel!");
                    }
                },
                {
                    extend: 'pdf',
                    title: 'Patient Documents',
                    className: 'oldbutton',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.pdfHtml5.action.call(this, e, dt, node, config);
                        exportLogs("Employee Exported Patient Documents with patId = @emr.appId to PDF!");
                    }
                },
                {
                    extend: 'csv',
                    title: 'Patient Documents',
                    className: 'oldbutton',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.csvHtml5.action.call(this, e, dt, node, config);
                        exportLogs("Employee Exported Patient Documents with patId = @emr.appId to CSV!");
                    }
                },
                {
                    extend: 'print',
                    title: 'Patient Documents',
                    className: 'oldbutton',
                    exportOptions: {
                        columns: [1, 2, 3]
                    },
                    action: function (e, dt, node, config) {
                        $.fn.dataTable.ext.buttons.print.action.call(this, e, dt, node, config);
                        exportLogs("Employee Printed Patient Documents with patId = @emr.appId Remarks!");
                    }
                }
            ]
        });
        table.buttons().container()
            .appendTo('#tbl_Predocuments_wrapper .col-md-6:eq(0)');

        setTimeout(function () {
            table.columns.adjust().draw();
        }, 350);

    }
    //#endregion Bind Previous DataTable

    //#region Delete Remark
    var delete_doc = function (docId) {
        Swal.fire({
            title: "Are you sure you want to delete this Document ?",
            text: "This action will delete this Document!",
            icon: "question",
            showCancelButton: !0,
            confirmButtonText: 'Yes! I Confirm',
            cancelButtonText: 'No! Cancel Please',
            confirmButtonClass: "btn btn-success mt-2", cancelButtonClass: "btn btn-danger ms-2 mt-2", buttonsStyling: !1
        }).then(function (t) {
            if (t.value) {
                $.ajax({
                    url: '@Url.Action("DeleteDocument", "Patient", new { area = "Patient" })?docId=' + docId,
                    type: "GET",
                    dataType: "JSON",
                    success: function (data) {
                        if (data.isAuthorized) {
                            if (data.success) {
                                Swal.fire({
                                    title: "Success!",
                                    text: "Document is Deleted Successfully!",
                                    icon: "success",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60"
                                });
                                GetDocuments(@emr.appId, "EMR");
                            }
                            else {
                                Swal.fire({
                                    title: "Error!",
                                    text: "Failed to Delete Remarks!",
                                    icon: "error",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                                });
                            }
                        }
                        else {
                            Swal.fire({
                                title: "Access Denied!",
                                text: "You do not have enough privileges to delete this Remarks!",
                                icon: "error",
                                showCancelButton: 0,
                                confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                            });
                        }

                    },
                    error: function (xhr) {
                        Swal.fire({
                            title: "Error!",
                            text: "Failed to Delete Remarks! Please refresh the page and try again.",
                            icon: "error",
                            showCancelButton: 0,
                            confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                        });
                    }
                });
            }
        });
    }
    //#endregion Delete Denialcode

    //#region View Doc Modal
        var view_doc = function (type, id) {
            console.log(type,id);
        $.ajax({
            type: "GET",
            url: "@Url.Action("ViewDocument", "PatientInsurance", new { area = "Patient" })?type=" + type + "&id=" + id,
            contentType: "application/json",
            dataType: "html",
            success: function (data) {
                $("#view_doc_modal_body").html(data);
                $("#view_doc_modal").modal("show");
            },
            error: function (xhr) {
                console.log(xhr);
            }
        });
    };
    //#endregion View Doc Modal
    </script>
}
@model BusinessEntities.EMR.PatientTreatments
@using System.Linq;
@using System.Security.Claims;
@using BusinessEntities;

@{
    var claims = ClaimsPrincipal.Current.Identities.First().Claims.ToList();
    var emp_designation = claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).SingleOrDefault();
    EMRInfo emr = (EMRInfo)TempData["emr_data"];
    TempData.Keep("emr_data");
    ViewBag.Title = "Insurance Treatments";
}

<style>
    #tbl_InsTreat_wrapper .dataTables_scroll .dataTables_scrollBody {
        min-height: 250px;
    }

    #tbl_PreInsTreat_wrapper .dataTables_scroll .dataTables_scrollBody {
        min-height: auto;
    }

    @@media (min-width: 768px) {
        .col-md-6 {
            flex: 0 0 100% !important;
            max-width: 100% !important;
        }
    }
</style>

<h3 class="card-title text-primary fs-16">Insurance Treatments & Procedures</h3>

<div class="row pb-2">
    <div class="col-sm-12 col-md-12 d-flex justify-content-center">
        <div id="errorInsCreate"></div>
        <div id="errorInsEdit"></div>
    </div>
</div>

<div id="InsTreat_add">
</div>

<div id="InsTreat_edit">
</div>

<input type="hidden" id="uhiInvId" value="0" />

<div class="row p-4">
    <div class="col-sm-12 col-md-12 d-flex justify-content-center">
        <div id="errorInsurance"></div>
        <div id="errorSummary"></div>
    </div>
</div>

<div class="table-responsive">
    <table id="tbl_InsTreat" class="table table-striped table-bordered text-nowrap resize-table" style="width: 100%;">
        <thead>
            <tr style="color: #fff !important; background-color: #3C457D; border-color: #3C457D;">
                <th class="border-bottom-0 font-weight-semibold text-white text-center"></th>
                <th class="border-bottom-0 font-weight-semibold text-white">#</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Pre Auth</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Time</th>
                <th class="border-bottom-0 font-weight-semibold text-white">CPT Code</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Treatment</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Teeth</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Surface</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Qty</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Session</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Unit<br /> Price</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Gross</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Discount</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Patient<br /> Share</th>
                <th class="border-bottom-0 font-weight-semibold text-white">NET</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Status</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Notes</th>
                <th class="border-bottom-0 font-weight-semibold text-white"><i class="fe fe-more-vertical" style="font-size: 20px;"></i></th>
                <th class="border-bottom-0 font-weight-semibold text-white">Pre-Auth Code</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Approved Date</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Expiry Date</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Start Time</th>
                <th class="border-bottom-0 font-weight-semibold text-white">End Time</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Status</th>
                <th class="border-bottom-0 font-weight-semibold text-white">Lab Status</th>
            </tr>
        </thead>
        <tfoot>
            <tr>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th class="text-end text-dark font-weight-semibold fs-17">Total :</th>
                <th class="table_footer_align fs-16"></th>
                <th class="table_footer_align fs-16"></th>
                <th class="table_footer_align fs-16"></th>
                <th class="table_footer_align fs-16"></th>
                <th class="table_footer_align fs-16"></th>
                <th class="table_footer_align fs-16"></th>
                <th class="table_footer_align fs-16"></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </tfoot>
    </table>
</div>

<!-- Modal Treatment Items Details -->
<div class="modal fade overflow-auto" id="treatment_item_details_ins" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true" data-modal-from="invoice-list">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content shadow-lg" id="treatment_item_details_ins_body">
        </div>
    </div>
</div>

<!-- Modal Treatment Attachments Details -->
<div class="modal fade overflow-auto" id="treatment_attachments_details_ins" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content shadow-lg" id="treatment_attachments_details_ins_body">
        </div>
    </div>
</div>

<script type="text/javascript">
    //#region Page Load
    $(function () {
        $(document).on('select2:open', () => {
            document.querySelector('.select2-search__field').focus();
        });

        $("body").addClass("app sidebar-mini sidenav-toggled");

        $("#InsTreat_add").show();

        addInsTreatments();

        getInsTreatments();
    });
    //#endregion

    //#region Load Insurance Treatments
    var getInsTreatments = function () {
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAllPatientTreatments", "PatientTreatments", new { area = "EMR" })?appId=" + "@emr.appId" + "&pt_type=Insurance",
            success: function (response) {
                if (response.isAuthorized != false) {
                    var table;
                    if ($.fn.dataTable.isDataTable('#tbl_InsTreat')) {
                        table = $('#tbl_InsTreat').DataTable();
                        table.clear();
                        table.rows.add(response).draw();
                    }
                    else {
                        BindInsDataTable(response);
                    }
                }
                else {
                    console.log("You are not Authorized!");
                }
            },
            error: function (xhr) {
                console.log(xhr);
            }
        }).done(function () {
            resizedt();
        });
    }
    //#endregion

    //#region Bind Insurance Datatable
    var BindInsDataTable = function (response) {
        var numFormat = $.fn.dataTable.render.number('\,', '.', 2, '').display;

        var table = $("#tbl_InsTreat").DataTable({
            fixedHeader: {
                header: true,
                footer: true
            },
            processing: true,
            "deferRender": true,
            "pageLength": 25,
            "retrieve": true,
            lengthChange: true,
            "aaData": response,
            "aoColumns": [
                {
                    "mData": "ptId",
                    "orderable": false,
                    "className": "select-checkbox text-center inbox-small-cells",
                    'checkboxes': {
                        'selectRow': true
                    }
                },
                {
                    "mData": "ptId",
                    "orderable": false,
                    "searchable": false,
                    "className": "text-center",
                    "render": function (data, type, row, meta) {
                        let _index = (meta.row) + 1;

                        if (_index >= 10) {
                            return "<a href='javascript:void(0)' class='fs-13 font-weight-bold'>" + _index + "</a>";
                        }
                        else {
                            return "<a href='javascript:void(0)' class='fs-13 font-weight-bold'>0" + _index + "</a>";
                        }
                    }
                },
                {
                    "mData": "pt_auth_code",
                    "className": 'text-center',
                    "render": function (pt_auth_code, type, full, meta) {
                        var dt = '';
                        var date_app = full.pt_auth_adate;
                        var date_exp = full.pt_auth_edate;
                        var req = full.pt_tr_dent_option;

                        if (pt_auth_code == "") {
                            if (req == "Required") {
                                pt_auth_code = '<span class="text-danger font-weight-semibold"><i class="fe fe-alert-octagon text-danger" title="Prior Auth Required"></i> Required!<span>';
                            }
                            else {
                                pt_auth_code = '<span class="text-muted">N/A</span>';
                            }
                        }
                        else {
                            pt_auth_code = '<span class="font-weight-semibold">' + pt_auth_code + '</span>';
                        }

                        if (type === 'display' || type === 'filter') {
                            date_app = moment(full.pt_auth_adate).format("DD-MM-YYYY");
                            date_exp = moment(full.pt_auth_edate).format("DD-MM-YYYY");

                            dt += pt_auth_code + '</span><br />';

                            if (date_app == "31-12-1899") {
                                dt += '<span class="badge bg-success-light mb-1">Approved Date</span><br/>' +
                                    '<i class="fe fe-calendar text-dark"></i> <b class="text-muted">N/A<b><br/>';
                            }
                            else {
                                dt += '<span class="badge bg-success-light mb-1">Approved Date</span><br/>' +
                                    '<i class="fe fe-calendar text-dark"></i> <b class="text-dark">' + date_app + '</b><br/>';
                            }

                            if (date_exp == "01-01-2100") {
                                dt += '<span class="badge bg-danger-light mb-1">Expiry Date</span><br/>' +
                                    '<i class="fe fe-calendar text-dark"></i> <b class="text-muted">N/A<b>';
                            }
                            else {
                                dt += '<span class="badge bg-danger-light mb-1">Expiry Date</span><br/>' +
                                    '<i class="fe fe-calendar text-dark"></i> <b class="text-dark">' + date_exp + '<b>';
                            }

                            return dt;
                        }

                        return moment(date_app).format("YYYY-MM-DD");
                    }
                },
                {
                    "mData": "pt_date_collected",
                    "className": 'text-center',
                    "render": function (pt_date_collected, type, full, meta) {
                        var date_rec = full.pt_date_received;

                        var dt = '';

                        if (type === 'display' || type === 'filter') {
                            var collec = moment(pt_date_collected).format("DD-MM-YYYY");
                            var rec = moment(date_rec).format("DD-MM-YYYY");

                            dt += '<br />';

                            if (collec == "31-12-1899") {
                                dt += '<span class="badge bg-success-light mb-1">Start Time</span><br/>' +
                                    '<i class="fe fe-clock text-dark"></i> <b class="text-muted">N/A<b><br/>';
                            }
                            else {
                                dt += '<span class="badge bg-success-light mb-1">Start Time</span><br/>' +
                                    '<i class="fe fe-clock text-dark"></i> <b class="text-dark">' + moment(pt_date_collected).format(" HH:mm") + '</b><br/>';
                            }

                            if (rec == "31-12-1899") {
                                dt += '<span class="badge bg-danger-light mb-1">End Time</span><br/>' +
                                    '<i class="fe fe-clock text-dark"></i> <b class="text-muted">N/A<b><br/>';
                            }
                            else {
                                dt += '<span class="badge bg-danger-light mb-1 mt-1">End Time</span><br/>' +
                                    '<i class="fe fe-clock text-dark"></i> <b class="text-dark">' + moment(date_rec).format(" HH:mm") + '<b>';
                            }

                            return dt;
                        }

                        return moment(pt_date_collected).format(" HH:mm");
                    }
                },
                {
                    "mData": "tr_code",
                    "className": 'text-left',
                },
                {
                    "mData": "tr_name_type",
                    "className": 'text-wrap text-justify'
                },
                {
                    "mData": "pt_teeth",
                    "className": 'text-center'
                },
                {
                    "mData": "pt_sur"
                },
                {
                    "mData": "pt_qty",
                    "className": 'text-right',
                    "render": $.fn.dataTable.render.number(',', '.', 2)
                },
                {
                    "mData": "pt_ses",
                    "className": 'text-right',
                },
                {
                    "mData": "pt_uprice",
                    "className": 'text-right',
                    "render": $.fn.dataTable.render.number(',', '.', 2)
                },
                {
                    "mData": "pt_total",
                    "className": 'text-right',
                    "render": $.fn.dataTable.render.number(',', '.', 2)
                },
                {
                    "mData": "pt_disc",
                    "className": 'text-right',
                    "render": $.fn.dataTable.render.number(',', '.', 2)
                },
                {
                    "mData": "pat__share",
                    "className": 'text-right',
                    "render": $.fn.dataTable.render.number(',', '.', 2)
                },
                {
                    "mData": "pt_net",
                    "className": 'text-right',
                    "render": $.fn.dataTable.render.number(',', '.', 2)
                },
                {
                    "mData": "pt_status",
                    "className": 'text-center',
                    "render": function (pt_status, type, full, meta) {
                        var _more = '<b>' + pt_status + '</b><br />';
                        var lab_status = full.pt_lab_status;

                        if (lab_status != "") {
                            _more += '<span class="text-secondary" title="Lab Status">' + lab_status + '</span>';
                        }
                        else {
                            _more += '<span class="text-muted">N/A</span>';
                        }

                        return _more;
                    }
                },
                {
                    "mData": "pt_notes",
                    "className": 'text-justify text-wrap',
                    "render": function (pt_notes) {
                        if (pt_notes != "") {
                            return pt_notes;
                        }
                        else {
                            return '<span class="text-muted">N/A</span>';
                        }
                    }
                },
                {
                    "mData": "ptId",
                    "className": 'btn-edit text-center',
                    "orderable": false,
                    "searchable": false,
                    "render": function (ptId, type, full, meta) {
                        var status = full.pt_status;
                        var allocated = full.isAllocated;

                        var more = '<div class="dropdown"><a type="button" class="" data-bs-toggle="dropdown"><i class="fe fe-more-vertical" style="font-size: 20px;"></i></a>' +
                                '<div class="dropdown-menu" style="min-width:auto">';

                            var edit_and_delete = '<a class="edit dropdown-item text-dark fw-bold" onclick="editInsTreatments(\'' + ptId + '\')"><i class="fe fe-edit-2 text-success" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Edit</a>' +
                                '<a class="dropdown-item text-dark fw-bold" onclick="deleteInsTreatments(\'' + ptId + '\',\'' + status + '\')"><i class="fe fe-trash text-danger" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Delete</a>' +
                                '<a class="dropdown-item text-dark fw-bold" onclick="addInsItems(\'' + ptId + '\')"><i class="fe fe-folder-plus text-primary curpointer" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Items</a>' +
                                '<a class="dropdown-item text-dark fw-bold remrk" onclick="addInsAttachements(\'' + ptId + '\')"><i class="fa fa-comments-o text-dark" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Attachments</a>' +
                                '</div>' +
                                '</div>';

                            var no_edit = '<a class="dropdown-item text-dark fw-bold" onclick="deleteInsTreatments(\'' + ptId + '\',\'' + status + '\')"><i class="fe fe-trash text-danger" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Delete</a>' +
                                '<a class="dropdown-item text-dark fw-bold" onclick="addInsItems(\'' + ptId + '\')"><i class="fe fe-folder-plus text-primary curpointer" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Items</a>' +
                                '<a class="dropdown-item text-dark fw-bold remrk" onclick="addInsAttachements(\'' + ptId + '\')"><i class="fa fa-comments-o text-dark" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Attachments</a>' +
                                '</div>' +
                                '</div>';

                            var no_delete = '<a class="edit dropdown-item text-dark fw-bold" onclick="editInsTreatments(\'' + ptId + '\')"><i class="fe fe-edit-2 text-success" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Edit</a>' +
                                '<a class="dropdown-item text-dark fw-bold" onclick="addInsItems(\'' + ptId + '\')"><i class="fe fe-folder-plus text-primary curpointer" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Items</a>' +
                                '<a class="dropdown-item text-dark fw-bold remrk" onclick="addInsAttachements(\'' + ptId + '\')"><i class="fa fa-comments-o text-dark" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Attachments</a>' +
                                '</div>' +
                                '</div>';

                        var no_edit_and_no_delete = '<a class="dropdown-item text-dark fw-bold" onclick="addInsItems(\'' + ptId + '\')"><i class="fe fe-folder-plus text-primary curpointer" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Items</a>' +
                                '<a class="dropdown-item text-dark fw-bold remrk" onclick="addInsAttachements(\'' + ptId + '\')"><i class="fa fa-comments-o text-dark" style="font-size: 15px;margin-right: 0.5rem;cursor:pointer"></i>&nbsp;Attachments</a>' +
                                '</div>' +
                                '</div>';

                        if (allocated == 0) {
                            if ("@emp_designation.ToString()" === "Super Administrator") {
                                more += edit_and_delete;
                            }
                            else {
                                if ("@emr.set_emr_lock" == "NoLock") {
                                    more += edit_and_delete;
                                }
                                else {
                                    if ("@emr.app_ae_date" >= "@emr.today") {
                                        more += edit_and_delete;
                                    }
                                    else {
                                        if (status == "Approved" || status == "Rejected" || status == "Partially Approved") {
                                            more += no_edit;
                                        }
                                        else {
                                            more += edit_and_delete;
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            if ("@emp_designation.ToString()" === "Super Administrator") {
                                more += no_delete;
                            }
                            else {
                                if ("@emr.set_emr_lock" == "NoLock") {
                                    more += no_delete;
                                }
                                else {
                                    if ("@emr.app_ae_date" >= "@emr.today") {
                                        more += no_delete;
                                    }
                                    else {
                                        if (status == "Approved" || status == "Rejected" || status == "Partially Approved") {
                                            more += no_edit_and_no_delete;
                                        }
                                        else {
                                            more += no_delete;
                                        }
                                    }
                                }
                            }
                        }

                        return more;
                    }
                },
                //#region Hidden Export Columns
                {
                    "visible": false,
                    "mData": "pt_auth_code"
                },
                {
                    "visible": false,
                    "mData": "pt_auth_adate",
                    "render": function (pt_auth_adate, type, full, meta) {
                        if (type === 'display' || type === 'filter') {
                            pt_auth_adate = moment(pt_auth_adate).format("DD-MM-YYYY");

                            if (pt_auth_adate == "31-12-1899") {
                                return '';
                            }
                            else {
                                return pt_auth_adate;
                            }
                        }

                        return moment(pt_auth_adate).format("YYYY-MM-DD");
                    }
                },
                {
                    "visible": false,
                    "mData": "pt_auth_edate",
                    "render": function (pt_auth_edate, type, full, meta) {
                        if (type === 'display' || type === 'filter') {
                            pt_auth_edate = moment(pt_auth_edate).format("DD-MM-YYYY");

                            if (pt_auth_edate == "31-12-1899") {
                                return '';
                            }
                            else {
                                return pt_auth_edate;
                            }
                        }

                        return moment(pt_auth_edate).format("YYYY-MM-DD");
                    }
                },
                {
                    "visible": false,
                    "mData": "pt_date_collected",
                    "render": function (pt_date_collected, type, full, meta) {
                        if (type === 'display' || type === 'filter') {
                            var dc = moment(pt_date_collected).format("DD-MM-YYYY");

                            if (dc == "31-12-1899") {
                                return '';
                            }
                            else {
                                return moment(pt_date_collected).format(" HH:mm");
                            }
                        }

                        return moment(pt_date_collected).format(" HH:mm");
                    }
                },
                {
                    "visible": false,
                    "mData": "pt_date_received",
                    "render": function (pt_date_received, type, full, meta) {
                        if (type === 'display' || type === 'filter') {
                            var dc = moment(pt_date_received).format("DD-MM-YYYY");

                            if (dc == "31-12-1899") {
                                return '';
                            }
                            else {
                                return moment(pt_date_received).format(" HH:mm");
                            }
                        }

                        return moment(pt_date_received).format(" HH:mm");
                    }
                },
                {
                    "visible": false,
                    "mData": "pt_status",
                    "render": function (pt_status, type, full, meta) {
                        return pt_status;
                    }
                },
                {
                    "visible": false,
                    "mData": "pt_lab_status",
                    "render": function (pt_lab_status, type, full, meta) {
                        return pt_lab_status;
                    }
                },
                //#endregion
            ],
            order: [[1, 'asc']],
            language: {
                searchPlaceholder: 'Search...',
                sSearch: '<span class="text-primary font-weight-semi-bold">Search By Treatment</span>',
                lengthMenu: '_MENU_',
                scrollX: "100%",
            },
            searching: false,
            select: {
                style: 'multi',
                selector: 'td:first-child'
            },
            scrollX: true,
            scrollY: 500,
            scrollCollapse: true,
            buttons: [
                {
                    extend: 'excel',
                    title: 'Insurance Treatments',
                    footer: 'true',
                    exportOptions: {
                        columns: [18, 19, 20, 21, 22, 23, 24, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
                    }
                },
                {
                    extend: 'pdf',
                    title: 'Insurance Treatments',
                    footer: 'true',
                    exportOptions: {
                        columns: [18, 19, 20, 21, 22, 23, 24, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
                    }
                },
                {
                    extend: 'csv',
                    title: 'Insurance Treatments',
                    footer: 'true',
                    exportOptions: {
                        columns: [18, 19, 20, 21, 22, 23, 24, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
                    }
                },
                {
                    extend: 'print',
                    title: 'Insurance Treatments',
                    className: 'btn btn-primary',
                    footer: 'true',
                    exportOptions: {
                        columns: [18, 19, 20, 21, 22, 23, 24, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]
                    }
                },
                {
                    text: '<i class="fe fe-check-circle"></i> Generate Invoice',
                    className: 'btn btn-outline-success ms-2',
                    action: function (e, dt, node, config) {
                        e.preventDefault();

                        generateInvoice();
                    }
                },
                {
                    text: '<i class="fe fe-layout"></i> Quotation',
                    className: 'btn btn-outline-success ms-2',
                    action: function (e, dt, node, config) {
                        e.preventDefault();

                        print_Quotation();
                    }
                },
                {
                    text: '<i class="fe fe-layers"></i> Prior Request',
                    className: 'btn btn-outline-success ms-2',
                    action: function (e, dt, node, config) {
                        e.preventDefault();

                        prior_Request();
                    }
                }
            ],
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api();

                var intVal = function (i) {
                    return typeof i === 'string' ? i.replace(/[\$,]/g, '') * 1 : typeof i === 'number' ? i : 0;
                };

                var total = api.column(8).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(8).footer()).html(numFormat(total));

                total = api.column(9).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(9).footer()).html(total);

                total = api.column(10).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(10).footer()).html(total);

                total = api.column(11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(11).footer()).html(numFormat(total));

                total = api.column(12).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(12).footer()).html(numFormat(total));

                total = api.column(13).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(13).footer()).html(numFormat(total));

                total = api.column(14).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                $(api.column(14).footer()).html(numFormat(total));
            }
        });

        table.buttons().container().appendTo('#tbl_InsTreat_wrapper .col-sm-12:eq(0)');
    };
    //#endregion

    //#region Add Insurance Treatment
    function addInsTreatments() {
        $('#InsTreat_edit').hide();

        $.ajax({
            type: "GET",
            url: "@Url.Action("CreateInsTreatment", "PatientTreatments", new { area = "EMR" })?appId=" + @emr.appId,
            contentType: "application/json",
            dataType: "html",
            success: function (data) {
                $("#InsTreat_add").html(data);
                $("#InsTreat_add").show();
            },
            error: function (xhr) {
                console.log("Error while Adding Insurance Treatment : " + xhr.statusText);
            }
        });
    }
    //#endregion

    //#region Edit Insurance Treatment
    function editInsTreatments(ptId) {
        $('#InsTreat_add').hide();

        $.ajax({
            type: "GET",
            url: "@Url.Action("EditInsTreatment", "PatientTreatments", new { area = "EMR" })?ptId=" + ptId,
            contentType: "application/json",
            dataType: "html",
            success: function (data) {
                $("#InsTreat_edit").html(data);
                $("#InsTreat_edit").show();
            },
            error: function (xhr) {
                console.log("Error while Editing Insurance Treatment : " + xhr.statusText);
            }
        });
    }
    //#endregion

    //#region Delete Treatments
    var deleteInsTreatments = function (ptId, pt_status) {
        Swal.fire({
            title: "Are you sure you want to delete this Patient Treatment ?",
            text: "The selected Insurance Treatment will be deleted!",
            icon: "question",
            showCancelButton: !0,
            confirmButtonText: 'Yes! I Confirm',
            cancelButtonText: 'No! Cancel Please',
            confirmButtonClass: "btn btn-success mt-2", cancelButtonClass: "btn btn-danger ms-2 mt-2", buttonsStyling: !1
        }).then(function (t) {
            if (t.value) {
                $.ajax({
                    url: '@Url.Action("DeleteTreatments", "PatientTreatments", new { area = "EMR" })?data=' + ptId + "&pt_status=" + pt_status,
                    type: "POST",
                    dataType: 'json',
                    success: function (data) {
                        if (data.isAuthorized) {
                            if (data.isSuccess) {
                                Swal.fire({
                                    title: "Success!",
                                    text: "Patient Treatment Deleted Successfully!",
                                    icon: "success",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60"
                                });

                                getInsTreatments();
                            }
                            else {
                                Swal.fire({
                                    title: "Forbidden!",
                                    text: "An active Patient Treatment with the same details already exists.",
                                    icon: "error",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                                });
                            }
                        }
                        else {
                            Swal.fire({
                                title: "Access Denied!",
                                text: "You do not have Enough Privileges to Delete this Patient Treatment!",
                                icon: "error",
                                showCancelButton: 0,
                                confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                            });
                        }
                    },
                    error: function (xhr) {
                        Swal.fire({
                            title: "Error!",
                            text: "Failed to Delete Patient Treatment! Please Refresh The Page & Try Again.",
                            icon: "error",
                            showCancelButton: 0,
                            confirmButtonColor: "#0bb197", cancelButtonColor: "#ff3d60",
                        });

                        getInsTreatments();
                    }
                });
            }
        });
    }
    //#endregion

    //#region Generate Invoice
    function generateInvoice() {
        var table = $("#tbl_InsTreat").DataTable();
        var rows = $(table.$('input[type="checkbox"]').map(function () {
            return $(this).prop("checked") ? $(this).closest('tr') : null;
        }));

        var invoicedTotal = 0;

        table.rows().every(function () {
            var rowData = this.data();

            if (rowData.pt_status === "Invoiced") {
                invoicedTotal += parseFloat(rowData.pt_total);
            }
        });

        if (rows.length > 0) {
            var _ptIds = [];

            $.each(rows, function (index, rowId) {
                var isInvoiced = false;
                var isAllowed = false;
                var flag = false;
                var _data = table.row(rowId).data();
                var totalAmount = _data.pt_total;
                var prior = _data.pt_tr_dent_option;

                if (_data.pt_status == "Invoiced") {
                    isInvoiced = true;
                }

                if (isInvoiced) {
                    Swal.fire({
                        title: "This Treatment is Already Invoiced!",
                        text: "Please Select another Treatment!",
                        icon: "info",
                        showCancelButton: 0,
                        confirmButtonText: 'Ok',
                        cancelButtonText: 'No! Cancel Please',
                        confirmButtonClass: "btn btn-success mt-2",
                        cancelButtonClass: "btn btn-danger ms-2 mt-2",
                        buttonsStyling: !1
                    }).then(function (t) {
                        if (t.value) {
                            isInvoiced = false;
                        }
                    });
                }

                var sumOfTotals = invoicedTotal + totalAmount;

                if (sumOfTotals <= @emr.is_allowed_limit) {
                    isAllowed = true;
                }

                if (!isAllowed) {
                    Swal.fire({
                        title: "Allowed Limit Exceeded !!",
                        text: "Change Limit!",
                        icon: "info",
                        showCancelButton: !0,
                        confirmButtonText: 'Yes! Proceed',
                        cancelButtonText: 'No! Cancel Please',
                        confirmButtonClass: "btn btn-success mt-2",
                        cancelButtonClass: "btn btn-danger ms-2 mt-2",
                        buttonsStyling: !1
                    }).then(function (t) {
                        if (t.value) {
                            isAllowed = false;
                        }
                    });
                }

                if (!isInvoiced) {
                    if (isAllowed) {
                        if (prior == "Not-Required") {
                            flag = true;
                        }
                        else {
                            if (_data.pt_status == "Approved") {
                                flag = true;
                            }
                            else {
                                Swal.fire({
                                    title: "Pre Auth!",
                                    html: "Prior Authorisation is required for Patient Treatment : <b class='text-info'>" + _data.tr_name + "</b>",
                                    icon: "warning",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197",
                                    cancelButtonColor: "#ff3d60"
                                });
                            }
                        }
                    }
                }

                if (flag) {
                    _ptIds.push(_data.ptId);
                }
            });

            if (_ptIds.length > 0) {
                var bulkTreatments = {
                    ptIds: _ptIds,
                    inv_appId: "@emr.appId",
                    pat_name: "@emr.pat_name",
                    pat_code: "@emr.pat_code"
                }

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GenerateInsuranceInvoice", "PatientTreatments", new { area = "EMR" })",
                    dataType: 'json',
                    data: bulkTreatments,
                    success: function (data) {
                        $("#uhiInvId").val(data.invId);

                        if (data.isAuthorized) {
                            if (data.isSuccess) {
                                getInsTreatments();

                                Swal.fire({
                                    title: "Success!",
                                    text: data.message,
                                    icon: "success",
                                    showCancelButton: 0,
                                    confirmButtonColor: "#0bb197"
                                });

                                window.open("@Url.Action("printInsInvoice", "Invoice", new { area = "Invoice" })?invId=" + $("#uhiInvId").val(), "Invoice Print");
                            }
                            else {
                                if (data.invId == -1) {
                                    Swal.fire({
                                        title: "Already Invoiced!",
                                        text: data.message,
                                        icon: "warning",
                                        showCancelButton: 0,
                                        confirmButtonColor: "#0bb197"
                                    });
                                }
                                else {
                                    Swal.fire({
                                        title: "Error!",
                                        text: data.message,
                                        icon: "error",
                                        error: 0,
                                        confirmButtonColor: "#0bb197"
                                    });
                                }
                            }
                        }
                        else {
                            Swal.fire({
                                title: "Access Denied!",
                                text: "You do not have enough priveleges to Generate Invoice!",
                                icon: "error",
                                showCancelButton: 0,
                                confirmButtonColor: "#0bb197",
                                cancelButtonColor: "#ff3d60"
                            });
                        }
                    },
                    error: function (xhr) {
                        console.log(xhr);
                    }
                });
            }
        }
        else {
            Swal.fire({
                title: "Attention!",
                text: "Please Select Atleast One Treatment To Invoice!",
                icon: "info",
                showCancelButton: 0,
                confirmButtonColor: "#0bb197",
                cancelButtonColor: "#ff3d60"
            });
        }
    }
    //#endregion

    //#region Update Status to Prior Request
    function prior_Request() {
        var table = $("#tbl_InsTreat").DataTable();
        var rows = $(table.$('input[type="checkbox"]').map(function () {
            return $(this).prop("checked") ? $(this).closest('tr') : null;
        }));

        if (rows.length > 0) {
            $.each(rows, function (index, rowId) {
                var _data = table.row(rowId).data();

                if (_data.pt_status != 'Invoiced' && _data.pt_status != 'Prior Requests' && _data.pt_status != 'Approved') {
                    var _dataInsert = {
                        "ptId": _data.ptId,
                        "inv_appId": @emr.appId,
                    }

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("UpdateStatusToPriorRequest", "PatientTreatments", new { area = "EMR" })",
                        dataType: 'json',
                        data: _dataInsert,
                        success: function (data) {
                            var alertPlaceholder = document.getElementById("errorInsurance");

                            function alert(e, t) {
                                var l = document.createElement("div");
                                l.innerHTML = '<div class="alert alert-' + t + ' alert-dismissible" role="alert">' + e +
                                    '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-hidden="Close">x</button></div>', alertPlaceholder.append(l)
                            }

                            if (data.isSuccess) {
                                if (data.invId > 0) {
                                    alert("<i class='fe fe-check-circle text-white'></i> " + data.message + "!", "success");

                                    getInsTreatments();
                                }
                                else {
                                    alert("<i class='fe fe-alert-triangle text-white'></i> " + data.message + "", "warning");
                                }
                            }
                            else {
                                alert("<i class='fe fe-minus-circle text-white'></i> " + data.message + "!", "danger");
                            }

                            Timeout();
                        },
                        error: function (xhr) {
                            console.log(xhr);
                        }
                    });
                }
                else {
                    Swal.fire({
                        title: "Forbidden!",
                        text: "Unable to Update to Prior Request as Patient Treatment already " + _data.pt_status +"!",
                        icon: "warning",
                        showCancelButton: 0,
                        confirmButtonText: 'Ok',
                        cancelButtonText: 'No! Cancel Please',
                        confirmButtonClass: "btn btn-success mt-2",
                        cancelButtonClass: "btn btn-danger ms-2 mt-2",
                        buttonsStyling: !1
                    }).then(function (t) {
                        if (t.value) {
                            isInvoiced = false;
                        }
                    });
                }
            });
        }
        else {
            Swal.fire({
                title: "Attention!",
                text: "Please Select Atleast one Treatment To Prior Request!",
                icon: "info",
                showCancelButton: 0,
                confirmButtonColor: "#0bb197",
                cancelButtonColor: "#ff3d60"
            });
        }
    }
    //#endregion

    //#region Print Quotation
    function print_Quotation() {
        var table = $("#tbl_InsTreat").DataTable();

        var rows = $(table.$('input[type="checkbox"]').map(function () {
            return $(this).prop("checked") ? $(this).closest('tr') : null;
        }));

        if (rows.length > 0) {
            var _objArray = [];

            $.each(rows, function (index, rowId) {
                var _data = table.row(rowId).data();

                var _obj = {
                    "id": _data.ptId
                };

                _objArray.push(_obj);
            });

            var idsString = _objArray.map(obj => obj.id).join(',');

            $.ajax({
                url: '@Url.Action("Print_Insurance_Quotation", "PatientTreatments", new { area = "EMR" })',
                type: "POST",
                dataType: "json",
                data: { ids: idsString },
                async: false,
                success: function (response) {
                    if (response.isSuccess == true) {
                        window.open(response.message.PublicPath)
                    }
                    else {
                        Swal.fire({
                            title: "Error!",
                            text: response.message,
                            icon: "error",
                            showCancelButton: 0,
                            confirmButtonColor: "#0bb197",
                            cancelButtonColor: "#ff3d60"
                        });
                    }
                },
                error: function (xhr) {
                    console.log(xhr);
                }
            });
        }
        else {
            Swal.fire({
                title: "Attention!",
                text: "Please Select atleast 1 Treatment in the list to Print Quotation!",
                icon: "info",
                showCancelButton: 0,
                confirmButtonColor: "#0bb197",
                cancelButtonColor: "#ff3d60"
            });
        }
    }
    //#endregion

    //#region Update Status Click
    $('#btn_InsUpdate_Status').on('click', function (e) {
        e.preventDefault();

        var table = $("#tbl_InsTreat").DataTable();

        var rows = $(table.$('input[type="checkbox"]').map(function () {
            return $(this).prop("checked") ? $(this).closest('tr') : null;
        }));

        if ($("#upt_status").val() != null && $("#upt_status").val() != "") {
            if (rows.length > 0) {
                $.each(rows, function (index, rowId) {
                    var _data = table.row(rowId).data();

                    if (_data.pt_status != "Invoiced" && _data.pt_status != "Approved") {
                        var _dataInsert = {
                            "ptId": _data.ptId,
                            "pt_status": $("#upt_status :selected").val(),
                            "pt_notes": ""
                        }

                        $.ajax({
                            type: "POST",
                            url: "@Url.Action("UpdatePatientTreatmentStatus", "PatientTreatments", new { area = "EMR" })",
                            dataType: 'json',
                            data: _dataInsert,
                            success: function (data) {
                                var alertPlaceholder = document.getElementById("errorInsurance");

                                function alert(e, t) {
                                    var l = document.createElement("div");
                                    l.innerHTML = '<div class="alert alert-light-' + t + ' alert-dismissible" role="alert">' + e +
                                        '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-hidden="Close">x</button></div>', alertPlaceholder.append(l)
                                }

                                if (data.isSuccess) {
                                    if (data.invId > 0) {
                                        alert("<i class='fe fe-check-circle text-success'></i> Patient Treatment(s) Status Updated Successfully!", "success");

                                        $("#upt_status").val("").trigger("change");

                                        getInsTreatments();
                                    }
                                    else {
                                        alert("<i class='fe fe-alert-triangle text-warning'></i> " + data.message + "", "warning");
                                    }
                                }
                                else {
                                    alert("<i class='fe fe-minus-circle text-danger'></i> " + data.message + "!", "danger");
                                }

                                Timeout();
                            },
                            error: function (xhr) {
                                console.log(xhr);
                            }
                        });
                    }
                    else {
                        Swal.fire({
                            title: "Action Forbidden!",
                            text: _data.pt_status +" Treatment Status can't be updated!",
                            icon: "info",
                            showCancelButton: 0,
                            confirmButtonColor: "#0bb197",
                            cancelButtonColor: "#ff3d60"
                        });
                    }
                });
            }
            else {
                Swal.fire({
                    title: "Attention!",
                    text: "Please Select atleast 1 Treatment in the list to Update Status!",
                    icon: "info",
                    showCancelButton: 0,
                    confirmButtonColor: "#0bb197",
                    cancelButtonColor: "#ff3d60"
                });
            }
        }
        else {
            Swal.fire({
                title: "Attention!",
                text: "Please Select Status to Update!",
                icon: "info",
                showCancelButton: 0,
                confirmButtonColor: "#0bb197",
                cancelButtonColor: "#ff3d60"
            });
        }
    });
    //#endregion

    //#region Add Items
    function addInsItems(ptId) {
        $.ajax({
            type: "GET",
            url: "@Url.Action("TreatmentItems", "TreatmentItems", new { area = "EMR" })?ptId=" + ptId,
            contentType: "application/json",
            dataType: "html",
            success: function (response) {
                localStorage.setItem("ptId", ptId)

                $('#treatment_item_details_ins').attr("data-modal-from", "invoice-edit");
                $("#treatment_item_details_ins_body").html(response);
                $("#treatment_item_details_ins").modal("show");
            },
            error: function (xhr) {
                console.log("Error :" + xhr.statusText);
            }
        });
    }
    //#endregion

    //#region Add Attachements
    function addInsAttachements(ptId) {
        $.ajax({
            type: "GET",
            url: "@Url.Action("TreatmentAttachements", "TreatmentAttachements", new { area = "EMR" })?ptId=" + ptId,
            contentType: "application/json",
            dataType: "html",
            success: function (response) {
                $("#treatment_attachments_details_ins").attr("data-modal-from", "invoice-edit");

                $("#treatment_attachments_details_ins_body").html(response);

                $("#treatment_attachments_details_ins").modal("show");
            },
            error: function (xhr) {
                console.log("Error :" + xhr.statusText);
            }
        });
    }
    //#endregion

    //#region Bind Select Data
    var bindSelects = function () {
        $("#uge_1_type,#uge_2_type,#uge_3_type,#uge_4_type, #uge_5_type, #uge_6_type").select2({
            placeholder: 'Select Type',
            width: '100%',
            minimumResultsForSearch: '',
            dropdownParent: $('#form_GeneralExam'),
            escapeMarkup: function (markup) {
                return markup;
            }
        });

        $("#uge_7_type, #uge_8_type, #uge_9_type, #uge_10_type, #uge_11_type, #uge_12_type").select2({
            placeholder: 'Select Type',
            width: '100%',
            minimumResultsForSearch: '',
            dropdownParent: $('#form_GeneralExam'),
            escapeMarkup: function (markup) {
                return markup;
            }
        });

        $("#uge_13_type, #uge_14_type, #uge_15_type, #uge_16_type,#uge_17_type, #uge_18_type, #uge_19_type ").select2({
            placeholder: 'Select Type',
            width: '100%',
            minimumResultsForSearch: '',
            dropdownParent: $('#form_GeneralExam'),
            escapeMarkup: function (markup) {
                return markup;
            }
        });

        $("#uge_20_type,#uge_21_type,#uge_22_type,#uge_23_type,#uge_24_type, #uge_25_type").select2({
            placeholder: 'Select Type',
            width: '100%',
            minimumResultsForSearch: '',
            dropdownParent: $('#form_GeneralExam'),
            escapeMarkup: function (markup) {
                return markup;
            }
        });
    }
    //#endregion

    //#region UI/UX Functions
    function resizedt() {
        setTimeout(function () {
            $.fn.dataTable.tables({ visible: true, api: true }).columns.adjust();
        }, 350);
    }

    function Timeout() {
        window.setTimeout(function () {
            $(".alert").fadeTo(500, 0).slideUp(500, function () {
                $(this).remove();
            });
        }, 4200);
    }
    //#endregion
</script>